{
  
    
        "post0": {
            "title": "(1주차) 9월6일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . Import . from fastai.vision.all import * . &#45936;&#51060;&#53552;&#51200;&#51109; . path = untar_data(URLs.PETS)/&#39;images&#39; # URLs.PETS: 스트링 -&gt; 주소가 저장되어 있음.. -&gt; 주소로 들어가보니 어떠한 압축파일이 자동으로 다운 받아짐, 이게 데이터 # untar_data: (1) URLs.PETS에 저장된 주소로 찾아가서 (2) 압축을 풀어서 (3) 어떠한 폴더에 저장, 그 폴더의 위치는 path 에 저장 . . 100.00% [811712512/811706944 00:10&lt;00:00] path # 여기에 그림이 있다는 말이지?? . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images&#39;) . # 탐색... 여러파일들이 있기는함.. # Abyssinian_1.jpg 를 보고싶다면? PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;) . # Abyssinian_100.jpg 를 보고싶다면? PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_100.jpg&#39;) . - 그림을 확인 할 수 있는건 좋은데 이렇게 확인하니까 조금 귀찮음.. . _lst = [&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;,&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_10.jpg&#39;] . _lst[0] . &#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39; . PILImage.create(_lst[0]) . files= get_image_files(path) files . (#7390) [Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/scottish_terrier_92.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/leonberger_173.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/shiba_inu_120.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Persian_26.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/yorkshire_terrier_86.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Ragdoll_56.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/german_shorthaired_2.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/japanese_chin_169.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_192.jpg&#39;)...] . files[0] . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/scottish_terrier_92.jpg&#39;) . PILImage.create(files[0]) . print(files[2]) PILImage.create(files[2]) . /root/.fastai/data/oxford-iiit-pet/images/shiba_inu_120.jpg . print(files[3]) PILImage.create(files[3]) . /root/.fastai/data/oxford-iiit-pet/images/Persian_26.jpg . print(files[4]) PILImage.create(files[4]) . /root/.fastai/data/oxford-iiit-pet/images/yorkshire_terrier_86.jpg . print(files[5]) PILImage.create(files[5]) . /root/.fastai/data/oxford-iiit-pet/images/Ragdoll_56.jpg . print(files[6]) PILImage.create(files[6]) . /root/.fastai/data/oxford-iiit-pet/images/german_shorthaired_2.jpg . print(files[7]) PILImage.create(files[7]) . /root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg . print(files[8]) PILImage.create(files[8]) . /root/.fastai/data/oxford-iiit-pet/images/japanese_chin_169.jpg . # 특1: 대문자이면 고양이, 소문자이면 강아지그림이다!! (천재적인 저장방식) # 특2: 이미지크기가 서로 다르다.. . def label_func(fname): if fname[0].isupper(): return &#39;cat&#39; else: return &#39;dog&#39; . dls = ImageDataLoaders.from_name_func(path,files,label_func,item_tfms=Resize(224)) # path 경로에서 # files 에 해당하는 파일들을 불러와서 X를 만들고 # item_tfms 에 정의된 방식으로 X를 변환하여 저장한다. 그리고 # label_func: &quot;파일이름&quot; -&gt; &quot;라벨&quot;, 에 저장된 함수내용을 바탕으로 y를 만들어 저장한다. # 이 모든것이 저장된 자료는 변수 dls에 저장한다. . dls.show_batch(max_n=16) . &#54617;&#49845; . # 우리의 2차 목표: 그 모형에 &quot;새로운&quot; 자료를 전달하여 이미지를 분류할 것이다. (즉 클래시파이어를 쓴다는 소리) # cnn_learner 라는 함수를 이용해서 1차목표와 2차목표를 달성할 &quot;썸띵(Object)&quot;을 만들것임. ## 오브젝트란? 정보와 함수를 동시에 가지는 어떠한 집합체 # - 오브젝트.명사이름: 이것 통채로 하나의 변수처럼 쓸 수 있음. # - 오브젝트.동사이름: 이것 통채로 하나의 함수처럼 쓸 수 있음. (이때 함수의 첫번째 입력은 명시하지 않아도 오브젝트 그 자체가 된다) ## clafr에 필요한 명사(=정보) &lt;-- 우리가 넣어줘야하는 것들이 대부분 # (1) 모델정보: 클래시파이어로 누구를 뽑을것인가 (유명한 모델이 무엇인가? 잘 맞추는 모델이 무엇인가) # (2) 데이터: 데이터를 줘야함 # (3) 평가기준표: 채점을 할 지표 ## clafr에 필요한 동사(=함수) &lt;-- 이미 구현이 되어있음.. # (1) 학습 # (2) 결과를 판단 # (3) 예측 clsfr = cnn_learner(dls,resnet34,metrics=error_rate) # clsfr 라는 오브젝트를 만들건데.. # 그 오브젝트의 재료로 dls (데이터), resnet34 (데이터를 분석할 모형이름), metrics (모형의 성능을 평가할 기준) 를 넣음. . /usr/local/lib/python3.7/dist-packages/fastai/vision/learner.py:284: UserWarning: `cnn_learner` has been renamed to `vision_learner` -- please update your code warn(&#34;`cnn_learner` has been renamed to `vision_learner` -- please update your code&#34;) /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter &#39;pretrained&#39; is deprecated since 0.13 and will be removed in 0.15, please use &#39;weights&#39; instead. f&#34;The parameter &#39;{pretrained_param}&#39; is deprecated since 0.13 and will be removed in 0.15, &#34; /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for &#39;weights&#39; are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights. warnings.warn(msg) Downloading: &#34;https://download.pytorch.org/models/resnet34-b627a593.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet34-b627a593.pth . clsfr.fine_tune(1) # 학습을 하는 함수 . epoch train_loss valid_loss error_rate time . 0 | 0.189062 | 0.012517 | 0.006089 | 01:01 | . epoch train_loss valid_loss error_rate time . 0 | 0.051309 | 0.010439 | 0.003383 | 00:57 | . &#44592;&#51316; &#45936;&#51060;&#53552;&#47484; &#51096; &#47582;&#52628;&#45716;&#51648; &#54869;&#51064; . files[0] # 강아지 . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/scottish_terrier_92.jpg&#39;) . clsfr.predict(files[0]) . (&#39;dog&#39;, TensorBase(1), TensorBase([6.8846e-07, 1.0000e+00])) . files[7] # 고양이 . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;) . clsfr.predict(files[7]) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.3773e-08])) . clsfr.show_results() . &#50724;&#45813;&#48516;&#49437; . interpreter = Interpretation.from_learner(clsfr) # 오답을 분석하는 오브젝트를 만듬.. 재료는 클래시파이어! . interpreter.plot_top_losses(16) # 오답을 분석하는 오브젝트는 가장 오류가 높은 이미지를 정렬하여 보여주는 기능이 있음.. . &#51652;&#51676; &#51096;&#46104;&#45716;&#44172; &#47582;&#45716;&#44148;&#44032;? . clsfr.predict(files[7]) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.3773e-08])) . clsfr.predict(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.3773e-08])) . clsfr.predict(PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;)) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.3773e-08])) . PILImage.create(&#39;2022-09-06-cat1.png&#39;) . clsfr.predict(PILImage.create(&#39;2022-09-06-cat1.png&#39;)) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.5662e-10])) . PILImage.create(&#39;2022-09-06-cat2.jpeg&#39;) . clsfr.predict(PILImage.create(&#39;2022-09-06-cat2.jpeg&#39;)) . (&#39;cat&#39;, TensorBase(0), TensorBase([0.9809, 0.0191])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani01.jpeg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([3.2573e-10, 1.0000e+00])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani02.jpeg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([7.0723e-07, 1.0000e+00])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani03.jpg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([0.1814, 0.8186])) . &#49689;&#51228; . - 인터넷에 존재하는 개 혹은 고양이 이미지를 임의로 하나 불러온뒤 clsfr에 넣어보고 결과를 관찰하라. 관찰결과를 스크린샷하여 제출하라. .",
            "url": "https://guebin.github.io/DL2022/2022/09/06/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%946%EC%9D%BC.html",
            "relUrl": "/2022/09/06/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%946%EC%9D%BC.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "(1주차) 9월6일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . Import . from fastai.vision.all import * . &#45936;&#51060;&#53552;&#51200;&#51109; . path = untar_data(URLs.PETS)/&#39;images&#39; # URLs.PETS: 스트링 -&gt; 주소가 저장되어 있음.. -&gt; 주소로 들어가보니 어떠한 압축파일이 자동으로 다운 받아짐, 이게 데이터 # untar_data: (1) URLs.PETS에 저장된 주소로 찾아가서 (2) 압축을 풀어서 (3) 어떠한 폴더에 저장, 그 폴더의 위치는 path 에 저장 . path # 여기에 그림이 있다는 말이지?? . Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images&#39;) . # 탐색... 여러파일들이 있기는함.. # Abyssinian_1.jpg 를 보고싶다면? PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;) . PermissionError Traceback (most recent call last) /tmp/ipykernel_3804958/3380290388.py in &lt;module&gt; 2 # 탐색... 여러파일들이 있기는함.. 3 # Abyssinian_1.jpg 를 보고싶다면? -&gt; 4 PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/core.py in create(cls, fn, **kwargs) 121 if isinstance(fn,ndarray): return cls(Image.fromarray(fn)) 122 if isinstance(fn,bytes): fn = io.BytesIO(fn) --&gt; 123 return cls(load_image(fn, **merge(cls._open_args, kwargs))) 124 125 def show(self, ctx=None, **kwargs): ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/core.py in load_image(fn, mode) 96 def load_image(fn, mode=None): 97 &#34;Open and load a `PIL.Image` and convert to `mode`&#34; &gt; 98 im = Image.open(fn) 99 im.load() 100 im = im._new(im.im) ~/anaconda3/envs/py37/lib/python3.7/site-packages/PIL/Image.py in open(fp, mode, formats) 3090 3091 if filename: -&gt; 3092 fp = builtins.open(filename, &#34;rb&#34;) 3093 exclusive_fp = True 3094 PermissionError: [Errno 13] Permission denied: &#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39; . # Abyssinian_100.jpg 를 보고싶다면? PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_100.jpg&#39;) . PermissionError Traceback (most recent call last) /tmp/ipykernel_3804958/263578593.py in &lt;module&gt; 1 # 2 # Abyssinian_100.jpg 를 보고싶다면? -&gt; 3 PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_100.jpg&#39;) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/core.py in create(cls, fn, **kwargs) 121 if isinstance(fn,ndarray): return cls(Image.fromarray(fn)) 122 if isinstance(fn,bytes): fn = io.BytesIO(fn) --&gt; 123 return cls(load_image(fn, **merge(cls._open_args, kwargs))) 124 125 def show(self, ctx=None, **kwargs): ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/core.py in load_image(fn, mode) 96 def load_image(fn, mode=None): 97 &#34;Open and load a `PIL.Image` and convert to `mode`&#34; &gt; 98 im = Image.open(fn) 99 im.load() 100 im = im._new(im.im) ~/anaconda3/envs/py37/lib/python3.7/site-packages/PIL/Image.py in open(fp, mode, formats) 3090 3091 if filename: -&gt; 3092 fp = builtins.open(filename, &#34;rb&#34;) 3093 exclusive_fp = True 3094 PermissionError: [Errno 13] Permission denied: &#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_100.jpg&#39; . - 그림을 확인 할 수 있는건 좋은데 이렇게 확인하니까 조금 귀찮음.. . _lst = [&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;,&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_10.jpg&#39;] . _lst[0] . &#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39; . PILImage.create(_lst[0]) . files= get_image_files(path) files . (#7390) [Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/miniature_pinscher_81.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/english_setter_78.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/chihuahua_156.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/english_cocker_spaniel_181.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/scottish_terrier_131.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/Bengal_188.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/yorkshire_terrier_101.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/British_Shorthair_41.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/great_pyrenees_49.jpg&#39;),Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/wheaten_terrier_194.jpg&#39;)...] . files[0] . Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/miniature_pinscher_81.jpg&#39;) . PILImage.create(files[0]) . print(files[2]) PILImage.create(files[2]) . /home/cgb4/.fastai/data/oxford-iiit-pet/images/chihuahua_156.jpg . print(files[3]) PILImage.create(files[3]) . /home/cgb4/.fastai/data/oxford-iiit-pet/images/english_cocker_spaniel_181.jpg . print(files[4]) PILImage.create(files[4]) . /home/cgb4/.fastai/data/oxford-iiit-pet/images/scottish_terrier_131.jpg . print(files[5]) PILImage.create(files[5]) . /home/cgb4/.fastai/data/oxford-iiit-pet/images/Bengal_188.jpg . print(files[6]) PILImage.create(files[6]) . /home/cgb4/.fastai/data/oxford-iiit-pet/images/yorkshire_terrier_101.jpg . print(files[7]) PILImage.create(files[7]) . /home/cgb4/.fastai/data/oxford-iiit-pet/images/British_Shorthair_41.jpg . print(files[8]) PILImage.create(files[8]) . /home/cgb4/.fastai/data/oxford-iiit-pet/images/great_pyrenees_49.jpg . # 특1: 대문자이면 고양이, 소문자이면 강아지그림이다!! (천재적인 저장방식) # 특2: 이미지크기가 서로 다르다.. . def label_func(fname): if fname[0].isupper(): return &#39;cat&#39; else: return &#39;dog&#39; . dls = ImageDataLoaders.from_name_func(path,files,label_func,item_tfms=Resize(224)) # path 경로에서 # files 에 해당하는 파일들을 불러와서 X를 만들고 # item_tfms 에 정의된 방식으로 X를 변환하여 저장한다. 그리고 # label_func: &quot;파일이름&quot; -&gt; &quot;라벨&quot;, 에 저장된 함수내용을 바탕으로 y를 만들어 저장한다. # 이 모든것이 저장된 자료는 변수 dls에 저장한다. . dls.show_batch(max_n=16) . &#54617;&#49845; . # 우리의 2차 목표: 그 모형에 &quot;새로운&quot; 자료를 전달하여 이미지를 분류할 것이다. (즉 클래시파이어를 쓴다는 소리) # cnn_learner 라는 함수를 이용해서 1차목표와 2차목표를 달성할 &quot;썸띵(Object)&quot;을 만들것임. ## 오브젝트란? 정보와 함수를 동시에 가지는 어떠한 집합체 # - 오브젝트.명사이름: 이것 통채로 하나의 변수처럼 쓸 수 있음. # - 오브젝트.동사이름: 이것 통채로 하나의 함수처럼 쓸 수 있음. (이때 함수의 첫번째 입력은 명시하지 않아도 오브젝트 그 자체가 된다) ## clafr에 필요한 명사(=정보) &lt;-- 우리가 넣어줘야하는 것들이 대부분 # (1) 모델정보: 클래시파이어로 누구를 뽑을것인가 (유명한 모델이 무엇인가? 잘 맞추는 모델이 무엇인가) # (2) 데이터: 데이터를 줘야함 # (3) 평가기준표: 채점을 할 지표 ## clafr에 필요한 동사(=함수) &lt;-- 이미 구현이 되어있음.. # (1) 학습 # (2) 결과를 판단 # (3) 예측 clsfr = cnn_learner(dls,resnet34,metrics=error_rate) # clsfr 라는 오브젝트를 만들건데.. # 그 오브젝트의 재료로 dls (데이터), resnet34 (데이터를 분석할 모형이름), metrics (모형의 성능을 평가할 기준) 를 넣음. . /home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/learner.py:284: UserWarning: `cnn_learner` has been renamed to `vision_learner` -- please update your code warn(&#34;`cnn_learner` has been renamed to `vision_learner` -- please update your code&#34;) /home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/torchvision/models/_utils.py:209: UserWarning: The parameter &#39;pretrained&#39; is deprecated since 0.13 and will be removed in 0.15, please use &#39;weights&#39; instead. f&#34;The parameter &#39;{pretrained_param}&#39; is deprecated since 0.13 and will be removed in 0.15, &#34; /home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for &#39;weights&#39; are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights. warnings.warn(msg) . clsfr.fine_tune(1) # 학습을 하는 함수 . epoch train_loss valid_loss error_rate time . 0 | 0.146010 | 0.023395 | 0.009472 | 00:09 | . epoch train_loss valid_loss error_rate time . 0 | 0.058049 | 0.023479 | 0.008119 | 00:10 | . &#44592;&#51316; &#45936;&#51060;&#53552;&#47484; &#51096; &#47582;&#52628;&#45716;&#51648; &#54869;&#51064; . files[0] # 강아지 . Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/miniature_pinscher_81.jpg&#39;) . clsfr.predict(files[0]) . (&#39;dog&#39;, TensorBase(1), TensorBase([2.3169e-06, 1.0000e+00])) . files[7] # 고양이 . Path(&#39;/home/cgb4/.fastai/data/oxford-iiit-pet/images/British_Shorthair_41.jpg&#39;) . clsfr.predict(files[7]) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 2.7272e-09])) . clsfr.show_results() . &#50724;&#45813;&#48516;&#49437; . interpreter = Interpretation.from_learner(clsfr) # 오답을 분석하는 오브젝트를 만듬.. 재료는 클래시파이어! . interpreter.plot_top_losses(16) # 오답을 분석하는 오브젝트는 가장 오류가 높은 이미지를 정렬하여 보여주는 기능이 있음.. . &#51652;&#51676; &#51096;&#46104;&#45716;&#44172; &#47582;&#45716;&#44148;&#44032;? . clsfr.predict(files[7]) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 2.7272e-09])) . clsfr.predict(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;) . . 0.00% [0/1 00:00&lt;?] PermissionError Traceback (most recent call last) /tmp/ipykernel_3804958/1421118162.py in &lt;module&gt; -&gt; 1 clsfr.predict(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/learner.py in predict(self, item, rm_type_tfms, with_input) 301 def predict(self, item, rm_type_tfms=None, with_input=False): 302 dl = self.dls.test_dl([item], rm_type_tfms=rm_type_tfms, num_workers=0) --&gt; 303 inp,preds,_,dec_preds = self.get_preds(dl=dl, with_input=True, with_decoded=True) 304 i = getattr(self.dls, &#39;n_inp&#39;, -1) 305 inp = (inp,) if i==1 else tuplify(inp) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/learner.py in get_preds(self, ds_idx, dl, with_input, with_decoded, with_loss, act, inner, reorder, cbs, **kwargs) 288 if with_loss: ctx_mgrs.append(self.loss_not_reduced()) 289 with ContextManagers(ctx_mgrs): --&gt; 290 self._do_epoch_validate(dl=dl) 291 if act is None: act = getcallable(self.loss_func, &#39;activation&#39;) 292 res = cb.all_tensors() ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/learner.py in _do_epoch_validate(self, ds_idx, dl) 234 if dl is None: dl = self.dls[ds_idx] 235 self.dl = dl --&gt; 236 with torch.no_grad(): self._with_events(self.all_batches, &#39;validate&#39;, CancelValidException) 237 238 def _do_epoch(self): ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final) 191 192 def _with_events(self, f, event_type, ex, final=noop): --&gt; 193 try: self(f&#39;before_{event_type}&#39;); f() 194 except ex: self(f&#39;after_cancel_{event_type}&#39;) 195 self(f&#39;after_{event_type}&#39;); final() ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/learner.py in all_batches(self) 197 def all_batches(self): 198 self.n_iter = len(self.dl) --&gt; 199 for o in enumerate(self.dl): self.one_batch(*o) 200 201 def _backward(self): self.loss_grad.backward() ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/data/load.py in __iter__(self) 127 self.before_iter() 128 self.__idxs=self.get_idxs() # called in context of main process (not workers/subprocesses) --&gt; 129 for b in _loaders[self.fake_l.num_workers==0](self.fake_l): 130 # pin_memory causes tuples to be converted to lists, so convert them back to tuples 131 if self.pin_memory and type(b) == list: b = tuple(b) ~/anaconda3/envs/py37/lib/python3.7/site-packages/torch/utils/data/dataloader.py in __next__(self) 650 # TODO(https://github.com/pytorch/pytorch/issues/76750) 651 self._reset() # type: ignore[call-arg] --&gt; 652 data = self._next_data() 653 self._num_yielded += 1 654 if self._dataset_kind == _DatasetKind.Iterable and ~/anaconda3/envs/py37/lib/python3.7/site-packages/torch/utils/data/dataloader.py in _next_data(self) 690 def _next_data(self): 691 index = self._next_index() # may raise StopIteration --&gt; 692 data = self._dataset_fetcher.fetch(index) # may raise StopIteration 693 if self._pin_memory: 694 data = _utils.pin_memory.pin_memory(data, self._pin_memory_device) ~/anaconda3/envs/py37/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py in fetch(self, possibly_batched_index) 37 raise StopIteration 38 else: &gt; 39 data = next(self.dataset_iter) 40 return self.collate_fn(data) 41 ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/data/load.py in create_batches(self, samps) 138 if self.dataset is not None: self.it = iter(self.dataset) 139 res = filter(lambda o:o is not None, map(self.do_item, samps)) --&gt; 140 yield from map(self.do_batch, self.chunkify(res)) 141 142 def new(self, dataset=None, cls=None, **kwargs): ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastcore/basics.py in chunked(it, chunk_sz, drop_last, n_chunks) 223 if not isinstance(it, Iterator): it = iter(it) 224 while True: --&gt; 225 res = list(itertools.islice(it, chunk_sz)) 226 if res and (len(res)==chunk_sz or not drop_last): yield res 227 if len(res)&lt;chunk_sz: return ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/data/load.py in do_item(self, s) 153 def prebatched(self): return self.bs is None 154 def do_item(self, s): --&gt; 155 try: return self.after_item(self.create_item(s)) 156 except SkipItemException: return None 157 def chunkify(self, b): return b if self.prebatched else chunked(b, self.bs, self.drop_last) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/data/load.py in create_item(self, s) 160 def retain(self, res, b): return retain_types(res, b[0] if is_listy(b) else b) 161 def create_item(self, s): --&gt; 162 if self.indexed: return self.dataset[s or 0] 163 elif s is None: return next(self.it) 164 else: raise IndexError(&#34;Cannot index an iterable dataset numerically - must use `None`.&#34;) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/data/core.py in __getitem__(self, it) 453 454 def __getitem__(self, it): --&gt; 455 res = tuple([tl[it] for tl in self.tls]) 456 return res if is_indexer(it) else list(zip(*res)) 457 ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/data/core.py in &lt;listcomp&gt;(.0) 453 454 def __getitem__(self, it): --&gt; 455 res = tuple([tl[it] for tl in self.tls]) 456 return res if is_indexer(it) else list(zip(*res)) 457 ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/data/core.py in __getitem__(self, idx) 412 res = super().__getitem__(idx) 413 if self._after_item is None: return res --&gt; 414 return self._after_item(res) if is_indexer(idx) else res.map(self._after_item) 415 416 # %% ../nbs/03_data.core.ipynb 54 ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/data/core.py in _after_item(self, o) 372 raise 373 def subset(self, i): return self._new(self._get(self.splits[i]), split_idx=i) --&gt; 374 def _after_item(self, o): return self.tfms(o) 375 def __repr__(self): return f&#34;{self.__class__.__name__}: {self.items} ntfms - {self.tfms.fs}&#34; 376 def __iter__(self): return (self[i] for i in range(len(self))) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastcore/transform.py in __call__(self, o) 206 self.fs = self.fs.sorted(key=&#39;order&#39;) 207 --&gt; 208 def __call__(self, o): return compose_tfms(o, tfms=self.fs, split_idx=self.split_idx) 209 def __repr__(self): return f&#34;Pipeline: {&#39; -&gt; &#39;.join([f.name for f in self.fs if f.name != &#39;noop&#39;])}&#34; 210 def __getitem__(self,i): return self.fs[i] ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastcore/transform.py in compose_tfms(x, tfms, is_enc, reverse, **kwargs) 156 for f in tfms: 157 if not is_enc: f = f.decode --&gt; 158 x = f(x, **kwargs) 159 return x 160 ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastcore/transform.py in __call__(self, x, **kwargs) 79 @property 80 def name(self): return getattr(self, &#39;_name&#39;, _get_name(self)) &gt; 81 def __call__(self, x, **kwargs): return self._call(&#39;encodes&#39;, x, **kwargs) 82 def decode (self, x, **kwargs): return self._call(&#39;decodes&#39;, x, **kwargs) 83 def __repr__(self): return f&#39;{self.name}: nencodes: {self.encodes}decodes: {self.decodes}&#39; ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastcore/transform.py in _call(self, fn, x, split_idx, **kwargs) 89 def _call(self, fn, x, split_idx=None, **kwargs): 90 if split_idx!=self.split_idx and self.split_idx is not None: return x &gt; 91 return self._do_call(getattr(self, fn), x, **kwargs) 92 93 def _do_call(self, f, x, **kwargs): ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastcore/transform.py in _do_call(self, f, x, **kwargs) 95 if f is None: return x 96 ret = f.returns(x) if hasattr(f,&#39;returns&#39;) else None &gt; 97 return retain_type(f(x, **kwargs), x, ret) 98 res = tuple(self._do_call(f, x_, **kwargs) for x_ in x) 99 return retain_type(res, x) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastcore/dispatch.py in __call__(self, *args, **kwargs) 118 elif self.inst is not None: f = MethodType(f, self.inst) 119 elif self.owner is not None: f = MethodType(f, self.owner) --&gt; 120 return f(*args, **kwargs) 121 122 def __get__(self, inst, owner): ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/core.py in create(cls, fn, **kwargs) 121 if isinstance(fn,ndarray): return cls(Image.fromarray(fn)) 122 if isinstance(fn,bytes): fn = io.BytesIO(fn) --&gt; 123 return cls(load_image(fn, **merge(cls._open_args, kwargs))) 124 125 def show(self, ctx=None, **kwargs): ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/core.py in load_image(fn, mode) 96 def load_image(fn, mode=None): 97 &#34;Open and load a `PIL.Image` and convert to `mode`&#34; &gt; 98 im = Image.open(fn) 99 im.load() 100 im = im._new(im.im) ~/anaconda3/envs/py37/lib/python3.7/site-packages/PIL/Image.py in open(fp, mode, formats) 3090 3091 if filename: -&gt; 3092 fp = builtins.open(filename, &#34;rb&#34;) 3093 exclusive_fp = True 3094 PermissionError: [Errno 13] Permission denied: &#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39; . clsfr.predict(PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;)) . PermissionError Traceback (most recent call last) /tmp/ipykernel_3804958/3760633076.py in &lt;module&gt; -&gt; 1 clsfr.predict(PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;)) ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/core.py in create(cls, fn, **kwargs) 121 if isinstance(fn,ndarray): return cls(Image.fromarray(fn)) 122 if isinstance(fn,bytes): fn = io.BytesIO(fn) --&gt; 123 return cls(load_image(fn, **merge(cls._open_args, kwargs))) 124 125 def show(self, ctx=None, **kwargs): ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/core.py in load_image(fn, mode) 96 def load_image(fn, mode=None): 97 &#34;Open and load a `PIL.Image` and convert to `mode`&#34; &gt; 98 im = Image.open(fn) 99 im.load() 100 im = im._new(im.im) ~/anaconda3/envs/py37/lib/python3.7/site-packages/PIL/Image.py in open(fp, mode, formats) 3090 3091 if filename: -&gt; 3092 fp = builtins.open(filename, &#34;rb&#34;) 3093 exclusive_fp = True 3094 PermissionError: [Errno 13] Permission denied: &#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39; . PILImage.create(&#39;2022-09-06-cat1.png&#39;) . clsfr.predict(PILImage.create(&#39;2022-09-06-cat1.png&#39;)) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 2.1105e-11])) . PILImage.create(&#39;2022-09-06-cat2.jpeg&#39;) . clsfr.predict(PILImage.create(&#39;2022-09-06-cat2.jpeg&#39;)) . (&#39;cat&#39;, TensorBase(0), TensorBase([9.9960e-01, 4.0280e-04])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani01.jpeg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([5.1152e-09, 1.0000e+00])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani02.jpeg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([6.8279e-04, 9.9932e-01])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani03.jpg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([0.0274, 0.9726])) . &#49689;&#51228; . - 인터넷에 존재하는 개 혹은 고양이 이미지를 임의로 하나 불러온뒤 clsfr에 넣어보고 결과를 관찰하라. 관찰결과를 스크린샷하여 제출하라. . 숙제를 위한 예시코드 # https://dimg.donga.com/ugc/CDB/SHINDONGA/Article/5e/0d/9f/01/5e0d9f011a9ad2738de6.jpg &lt;-- 인터넷의 이미지 주소 img=PILImage.create(requests.get(&#39;https://dimg.donga.com/ugc/CDB/SHINDONGA/Article/5e/0d/9f/01/5e0d9f011a9ad2738de6.jpg&#39;).content) clsfr.predict(img) . | . - 숙제 못하겠으면 카톡으로 물어보세요! 답 알려드립니다. .",
            "url": "https://guebin.github.io/DL2022/2022/09/06/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%946%EC%9D%BC(2).html",
            "relUrl": "/2022/09/06/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%946%EC%9D%BC(2).html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "(1주차) 9월1일",
            "content": "&#44053;&#51032;&#50689;&#49345; . 없어요.. | . &#51656;&#47928;&#54616;&#45716; &#48169;&#48277; . &#49688;&#50629;&#47785;&#54364; . - 다양한 딥러닝 분석기법의 원리를 이해한다. . - 파이토치 사용방법을 익힌다. . &#44053;&#51032;&#44368;&#51116; &#48143; &#52280;&#44256;&#51088;&#47308; . - 강의교재: 강의노트 . - 참고자료: . 2021년 빅데이터분석 강의노트 (본 수업은 2021년 빅데이터분석 수업과 유사한 콘텐츠로 진행할 예정임) | 2022년 파이썬입문 강의노트 (numpy, class 부분이 약하다고 생각하면 참고 할 것) | fastai, Deep Learning for Coders with fastai &amp; PyTorch, Deep Learning for Coders with fastai &amp; PyTorch (번역판) | . &#49440;&#49688;&#44284;&#47785; . - 필수: 파이썬입문 (수업시간에 별도로 파이썬을 리뷰하는 시간을 갖지 않음) . - 선택: 수리통계학, 회귀분석, 선형대수학 (수업이해에 필요한 최소한의 지식은 리뷰함) . &#44053;&#51032;&#48276;&#50948; . - 딥러닝의 기초: DNN, 손실함수, 옵티마이저, 역전파, universal approximation thm . - 이미지 자료 분석: CNN, Class Activation Map (CAM) and XAI . - 추천시스템: SVD, Collaborative Filtering ... . - 텍스트와 시퀀스 자료 분석: RNN, LSTM, GRU, Attention... . - 생성모형: 식별모형과 생성모형, GAN . &#51452;&#51032;&#49324;&#54637; . - 출석을 모두 하고 과제를 모두 제출하였더라도 중간고사와 기말고사 합산점수가 매우 낮을 경우 F 혹은 D 학점이 나갈 수 있음. . - 2022년 1학기 데이터과학 수업과 내용이 일부 겹칠 수 있음 (다만 2022년 1학기 데이터과학 수업은 텐서플로우로 본 수업은 파이토치로 진행하는 차이점은 있음) .",
            "url": "https://guebin.github.io/DL2022/2022/09/01/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%941%EC%9D%BC.html",
            "relUrl": "/2022/09/01/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%941%EC%9D%BC.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "(A1) 깃허브와 fastpages를 이용하여 블로그 개설하기",
            "content": "About this doc . - 본 포스트는 2021년 1학기 Python 입문 강의내용중 일부를 업로드 하였음. . - Github, fastpages를 사용하여 블로그를 개설하고 관리하는 방법에 대한 설명임. . .",
            "url": "https://guebin.github.io/DL2022/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0.html",
            "relUrl": "/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0.html",
            "date": " • Aug 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "최규빈 . guebin@jbnu.ac.kr | 자연과학대학교 본관 205호 | 카카오톡 오픈채널1 | . 2022년 2학기 종료 후 폐쇄 예정 &#8617; . |",
          "url": "https://guebin.github.io/DL2022/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://guebin.github.io/DL2022/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}