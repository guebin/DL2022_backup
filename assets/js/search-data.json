{
  
    
        "post0": {
            "title": "(4주차) 9월27일 -- draft",
            "content": "Imports . import torch import pandas as pd import numpy as np import matplotlib.pyplot as plt . numpy, torch (&#49440;&#53469;&#54617;&#49845;) . numpy, torch&#45716; &#50628;&#52397; &#48708;&#49847;&#54644;&#50836; . - torch.tensor() = np.array() 처럼 생각해도 무방 . np.array([1,2,3]), torch.tensor([1,2,3]) . (array([1, 2, 3]), tensor([1, 2, 3])) . - 소수점의 정밀도에서 차이가 있음 (torch가 좀 더 쪼잔함) . np.array([3.123456789]) . array([3.12345679]) . torch.tensor([3.123456789]) . tensor([3.1235]) . - 기본적인 numpy 문법은 np 대신에 torch를 써도 무방 // 완전 같지는 않음 . np.arange(10), torch.arange(10) . (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) . np.linspace(0,1,10), torch.linspace(0,1,10) . (array([0. , 0.11111111, 0.22222222, 0.33333333, 0.44444444, 0.55555556, 0.66666667, 0.77777778, 0.88888889, 1. ]), tensor([0.0000, 0.1111, 0.2222, 0.3333, 0.4444, 0.5556, 0.6667, 0.7778, 0.8889, 1.0000])) . np.random.randn(10) . array([ 0.90335462, 0.44737938, 0.89509754, -0.61002167, -0.51081889, -1.27358181, -1.45469377, 0.2333329 , -1.98983017, 0.15708354]) . torch.randn(10) . tensor([ 2.6161, 0.3701, -1.0635, 0.0189, -0.2754, 0.7618, 0.4842, -0.1231, -0.5390, -0.7580]) . length $n$ vector, $n times 1$ col-vector, $1 times n$ row-vector . - 길이가 3인 벡터 선언방법 . a = torch.tensor([1,2,3]) a.shape . torch.Size([3]) . - 3x1 col-vec 선언방법 . (방법1) . a = torch.tensor([[1],[2],[3]]) a.shape . torch.Size([3, 1]) . (방법2) . a = torch.tensor([1,2,3]).reshape(3,1) a.shape . torch.Size([3, 1]) . - 1x3 row-vec 선언방법 . (방법1) . a = torch.tensor([[1,2,3]]) a.shape . torch.Size([1, 3]) . (방법2) . a = torch.tensor([1,2,3]).reshape(1,3) a.shape . torch.Size([1, 3]) . - 3x1 col-vec 선언방법, 1x3 row-vec 선언방법에서 [[1],[2],[3]] 혹은 [[1,2,3]] 와 같은 표현이 이해안되면 아래링크로 가셔서 . https://guebin.github.io/STBDA2022/2022/03/14/(2주차)-3월14일.html . 첫번째 동영상 12:15 - 22:45 에 해당하는 분량을 학습하시길 바랍니다. . torch&#51032; dtype . - 기본적으로 torch는 소수점으로 저장되면 dtype=torch.float32 가 된다. (이걸로 맞추는게 편리함) . tsr = torch.tensor([1.23,2.34]) tsr . tensor([1.2300, 2.3400]) . tsr.dtype . torch.float32 . - 정수로 선언하더라도 dtype를 torch.float32로 바꾸는게 유리함 . (안 좋은 선언예시) . tsr = torch.tensor([1,2]) tsr . tensor([1, 2]) . tsr.dtype . torch.int64 . (좋은 선언예시1) . tsr = torch.tensor([1,2],dtype=torch.float32) tsr . tensor([1., 2.]) . tsr.dtype . torch.float32 . (좋은 선언예시2) . tsr = torch.tensor([1,2.0]) tsr . tensor([1., 2.]) . tsr.dtype . torch.float32 . (사실 int로 선언해도 나중에 float으로 바꾸면 큰 문제없음) . tsr = torch.tensor([1,2]).float() tsr . tensor([1., 2.]) . tsr.dtype . torch.float32 . - 왜 정수만으로 torch.tensor를 만들때에도 torch.float32로 바꾸는게 유리할까? $ to$ torch.tensor끼리의 연산에서 문제가 될 수 있음 . 별 문제 없을수도 있지만 . torch.tensor([1,2])-torch.tensor([1.0,2.0]) . tensor([0., 0.]) . 에러가 날수도 있다 . torch.tensor([[1.0,0.0],[0.0,1.0]]) @ torch.tensor([[1],[2]]) . RuntimeError Traceback (most recent call last) /tmp/ipykernel_1020347/281683190.py in &lt;module&gt; -&gt; 1 torch.tensor([[1.0,0.0],[0.0,1.0]]) @ torch.tensor([[1],[2]]) RuntimeError: expected scalar type Float but found Long . torch.tensor([[1,0],[0,1]]) @ torch.tensor([[1.0],[2.0]]) . 둘다 정수로 통일하는것도 방법이지만 . torch.tensor([[1,0],[0,1]]) @ torch.tensor([[1],[2]]) . tensor([[1], [2]]) . 둘다 소수로 통일하는게 더 좋음 . torch.tensor([[1.0,0.0],[0.0,1.0]]) @ torch.tensor([[1.0],[2.0]]) . tensor([[1.], [2.]]) . shape of vector . - 행렬곱셈에 대한 shape 조심 . A = torch.tensor([[2.00,0.00],[0.00,3.00]]) b1 = torch.tensor([[-1.0,-5.0]]) b2 = torch.tensor([[-1.0],[-5.0]]) b3 = torch.tensor([-1.0,-5.0]) . A.shape,b1.shape,b2.shape,b3.shape . (torch.Size([2, 2]), torch.Size([1, 2]), torch.Size([2, 1]), torch.Size([2])) . - A@b1: 계산불가, b1@A: 계산가능 . A@b1 . RuntimeError Traceback (most recent call last) /tmp/ipykernel_1020347/615827064.py in &lt;module&gt; -&gt; 1 A@b1 RuntimeError: mat1 and mat2 shapes cannot be multiplied (2x2 and 1x2) . b1@A . tensor([[ -2., -15.]]) . - A@b2: 계산가능, b2@A: 계산불가 . A@b2 . tensor([[ -2.], [-15.]]) . b2@A . RuntimeError Traceback (most recent call last) /tmp/ipykernel_1020347/926932629.py in &lt;module&gt; -&gt; 1 b2@A RuntimeError: mat1 and mat2 shapes cannot be multiplied (2x1 and 2x2) . - A@b3: 계산가능, b3@A: 계산가능 . (A@b3).shape ## b3를 마치 col-vec 처럼 해석 . torch.Size([2]) . (b3@A).shape ## b3를 마지 row-vec 처럼 해석 . torch.Size([2]) . - 브로드캐스팅 . a = torch.tensor([1,2,3]) a - 1 . tensor([0, 1, 2]) . b = torch.tensor([[1],[2],[3]]) b - 1 . tensor([[0], [1], [2]]) . a - b # a를 row-vec 로 해석 . tensor([[ 0, 1, 2], [-1, 0, 1], [-2, -1, 0]]) . step1&#51032; &#45796;&#47480;&#48260;&#51204; (&#48373;&#49845; + $ alpha$) . - net를 만들어서 yhat을 구할경우 step1~4를 끝까지 한번진행해보자. . read data . - web -&gt; df . df = pd.read_csv(&quot;https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-22-regression.csv&quot;) df . x y . 0 -2.482113 | -8.542024 | . 1 -2.362146 | -6.576713 | . 2 -1.997295 | -5.949576 | . 3 -1.623936 | -4.479364 | . 4 -1.479192 | -4.251570 | . ... ... | ... | . 95 2.244400 | 10.325987 | . 96 2.393501 | 12.266493 | . 97 2.605604 | 13.098280 | . 98 2.605658 | 12.546793 | . 99 2.663240 | 13.834002 | . 100 rows × 2 columns . - df -&gt; tensor . x= torch.tensor(df.x,dtype=torch.float32).reshape(100,1) y= torch.tensor(df.y,dtype=torch.float32).reshape(100,1) X= torch.tensor([[1]*100,x]).T . ver1: net = torch.nn.Linear(1,1,bias=True) . - step1: yhat . net = torch.nn.Linear(in_features=1,out_features=1) net.weight.data, net.bias.data . (tensor([[-0.2735]]), tensor([0.7507])) . net.weight.data = torch.tensor([[10.0]]) net.bias.data = torch.tensor([-5.0]) net.weight.data, net.bias.data . (tensor([[10.]]), tensor([-5.])) . yhat = net(x) . - step2: loss . loss = torch.mean((y-yhat)**2) loss . tensor(85.8769, grad_fn=&lt;MeanBackward0&gt;) . - step3: 미분 . (미분전상황) . net.weight, net.bias . (Parameter containing: tensor([[10.]], requires_grad=True), Parameter containing: tensor([-5.], requires_grad=True)) . net.weight.grad, net.bias.grad . (None, None) . (미분) . loss.backward() . (미분후상황) . net.weight, net.bias . (Parameter containing: tensor([[10.]], requires_grad=True), Parameter containing: tensor([-5.], requires_grad=True)) . net.weight.grad, net.bias.grad . (tensor([[11.8893]]), tensor([-13.4225])) . - step4: update . net.weight.data = net.weight.data - 1/10 * net.weight.grad net.bias.data = net.bias.data - 1/10 * net.bias.grad . net.weight.data,net.bias.data . (tensor([[8.8111]]), tensor([-3.6577])) . - 반복 . (code before) . What = torch.tensor([[-5.0],[10.0]],requires_grad=True) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,(X@What).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e743d02d0&gt;] . for epoc in range(30): ## step1 yhat = X@What ## step2 loss = torch.mean((y-yhat)**2) ## step3 loss.backward() ## step4 What.data = What.data - 1/10 * What.grad What.grad = None . plt.plot(x,y,&#39;o&#39;) plt.plot(x,(X@What).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e742f6210&gt;] . (code after) . net = torch.nn.Linear(in_features=1,out_features=1) net.weight.data = torch.tensor([[10.0]]) net.bias.data = torch.tensor([-5.0]) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(x).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e73ff5050&gt;] . for epoc in range(30): ## step1 yhat = net(x) ## step2 loss = torch.mean((y-yhat)**2) ## step3 loss.backward() ## step4 (이게 엄청 귀찮아지네??) net.weight.data = net.weight.data - 1/10 * net.weight.grad net.bias.data = net.bias.data - 1/10 * net.bias.grad net.weight.grad = None net.bias.grad = None . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(x).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e73f70990&gt;] . ver2: net = torch.nn.Linear(2,1,bias=False) . - step1: yhat . net = torch.nn.Linear(in_features=2,out_features=1,bias=False) . net.weight . Parameter containing: tensor([[-0.0199, -0.5255]], requires_grad=True) . net.weight.data = torch.tensor([[-5.0, 10.0]]) net.weight . Parameter containing: tensor([[-5., 10.]], requires_grad=True) . yhat=net(X) . - step2: loss . loss = torch.mean((y-yhat)**2) loss . tensor(85.8769, grad_fn=&lt;MeanBackward0&gt;) . - step3: 미분 . (미분전상황) . net.weight.data . tensor([[-5., 10.]]) . net.weight.grad . (미분) . loss.backward() . (미분후상황) . net.weight.data . tensor([[-5., 10.]]) . net.weight.grad . tensor([[-13.4225, 11.8893]]) . - step4: update . net.weight.data = net.weight.data - 1/10 * net.weight.grad net.weight.data . tensor([[-3.6577, 8.8111]]) . - 반복 . (code before) -- ver1과 같으므로 생략할게요 . (code after) . net = torch.nn.Linear(in_features=2,out_features=1,bias=False) net.weight.data = torch.tensor([[-5.0, 10.0]]) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(X).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e73ef6050&gt;] . for epoc in range(30): ## step1 yhat = net(X) ## step2 loss = torch.mean((y-yhat)**2) ## step3 loss.backward() ## step4 net.weight.data = net.weight.data - 1/10 * net.weight.grad net.weight.grad = None . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(X).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e73e6f390&gt;] . step4&#51032; &#45796;&#47480;&#48260;&#51204;: &#50741;&#54000;&#47560;&#51060;&#51200;! . ver1: net = torch.nn.Linear(1,1,bias=True) . - 준비 . net = torch.nn.Linear(1,1) net.weight.data = torch.tensor([[10.0]]) net.bias.data = torch.tensor([[-5.0]]) . optimiger = torch.optim.SGD(net.parameters(),lr=1/10) . - step1~3 . yhat = net(x) . loss = torch.mean((y-yhat)**2) . loss.backward() . - step4 . (update 전) . net.weight.data, net.bias.data ## 값은 업데이트 전 . (tensor([[10.]]), tensor([[-5.]])) . net.weight.grad, net.bias.grad ## 미분값은 청소전 . (tensor([[11.8893]]), tensor([[-13.4225]])) . (update) . optimiger.step() optimiger.zero_grad() . (update 후) . net.weight.data, net.bias.data ## 값은 업데이트 되었음 . (tensor([[8.8111]]), tensor([[-3.6577]])) . net.weight.grad, net.bias.grad ## 미분값은 0으로 초기화하였음 . (tensor([[0.]]), tensor([[0.]])) . - 반복 . net = torch.nn.Linear(1,1) net.weight.data = torch.tensor([[10.0]]) net.bias.data = torch.tensor([-5.0]) optimiger = torch.optim.SGD(net.parameters(),lr=1/10) . for epoc in range(30): yhat = net(x) loss = torch.mean((y-yhat)**2) loss.backward() optimiger.step(); optimiger.zero_grad() . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(x).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e7232f7d0&gt;] . ver2: net = torch.nn.Linear(2,1,bias=False) . - 바로 반복하겠습니다.. . net = torch.nn.Linear(2,1,bias=False) net.weight.data = torch.tensor([[-5.0, 10.0]]) optimiger = torch.optim.SGD(net.parameters(),lr=1/10) . for epoc in range(30): yhat = net(X) loss = torch.mean((y-yhat)**2) loss.backward() optimiger.step(); optimiger.zero_grad() . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(X).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e720cbf10&gt;] . . Appendix: net.parameters()&#51032; &#51032;&#48120;? (&#49440;&#53469;&#54617;&#49845;) . - iterator, generator의 개념필요 . https://guebin.github.io/IP2022/2022/06/06/(14주차)-6월6일.html, 클래스공부 8단계 참고 | . - 탐구시작: 네트워크 생성 . net = torch.nn.Linear(in_features=1,out_features=1) net.weight . Parameter containing: tensor([[0.1341]], requires_grad=True) . net.bias . Parameter containing: tensor([-0.5970], requires_grad=True) . - torch.optim.SGD? 를 확인하면 params에 대한설명에 아래와 같이 되어있음 . params (iterable): iterable of parameters to optimize or dicts defining parameter groups . - 설명을 읽어보면 params에 iterable object를 넣으라고 되어있음 (iterable object는 숨겨진 명령어로 __iter__를 가지고 있는 오브젝트를 의미) . set(dir(net.parameters)) &amp; {&#39;__iter__&#39;} . set() . set(dir(net.parameters())) &amp; {&#39;__iter__&#39;} . {&#39;__iter__&#39;} . - 무슨의미? . _generator = net.parameters() . _generator.__next__() . Parameter containing: tensor([[0.1341]], requires_grad=True) . _generator.__next__() . Parameter containing: tensor([-0.5970], requires_grad=True) . _generator.__next__() . StopIteration Traceback (most recent call last) /tmp/ipykernel_1020347/3395526306.py in &lt;module&gt; -&gt; 1 _generator.__next__() StopIteration: . - 이건 이런느낌인데? . _generator2 = iter([net.weight,net.bias]) . _generator2 . &lt;list_iterator at 0x7f8e71cdd110&gt; . _generator2.__next__() . Parameter containing: tensor([[0.1341]], requires_grad=True) . _generator2.__next__() . Parameter containing: tensor([-0.5970], requires_grad=True) . _generator2.__next__() . StopIteration Traceback (most recent call last) /tmp/ipykernel_1020347/2722541531.py in &lt;module&gt; -&gt; 1 _generator2.__next__() StopIteration: . - 즉 아래는 같은코드이다. . ### 코드1 _generator = net.parameters() torch.optim.SGD(_generator,lr=1/10) ### 코드2 _generator = iter([net.weight,net.bias]) torch.optim.SGD(_generator,lr=1/10) ### 코드3 (이렇게 써도 코드2가 실행된다고 이해할 수 있음) _iterator = [net.weight,net.bias] torch.optim.SGD(_iterator,lr=1/10) . 결론: net.parameters()는 net오브젝트에서 학습할 파라메터를 모두 모아 리스트(iterable object)로 만드는 함수라 이해할 수 있다. . - 응용예제1 . What = torch.tensor([[-5.0],[10.0]],requires_grad=True) optimiger = torch.optim.SGD([What],lr=1/10) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,(X@What).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e71c9bbd0&gt;] . for epoc in range(30): yhat = X@What loss = torch.mean((y-yhat)**2) loss.backward() optimiger.step();optimiger.zero_grad() . plt.plot(x,y,&#39;o&#39;) plt.plot(x,(X@What).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e705be550&gt;] . - 응용예제2 . b = torch.tensor(-5.0,requires_grad=True) w = torch.tensor(10.0,requires_grad=True) optimiger = torch.optim.SGD([b,w],lr=1/10) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,(w*x+b).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e7035b3d0&gt;] . for epoc in range(30): yhat = b+ w*x loss = torch.mean((y-yhat)**2) loss.backward() optimiger.step(); optimiger.zero_grad() . plt.plot(x,y,&#39;o&#39;) plt.plot(x,(w*x+b).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8e701f9dd0&gt;] . Logistic Regression . data . 995/5 . 199.0 . toeic = np.random.randint(low=110,high=199,size=1000)*5 gpa = np.random.uniform(low=2.1,high=4.5,size=1000) . u = -35 + 20*gpa/4.5 + 20*toeic/995 . u . array([-2.11454688e+00, -1.45479753e+00, -2.95834292e+00, -7.51644544e+00, -1.35386410e+01, -3.83749651e+00, -2.66722506e+00, -6.93832978e+00, -3.21260531e+00, -1.12409706e+01, -7.87032023e-01, -8.57942191e+00, -4.07150138e+00, -4.41835066e+00, -2.87954960e+00, -3.33218372e+00, -6.81744751e-01, -5.16556679e+00, -7.69829359e+00, -1.04137221e+01, -1.22879467e+01, -6.45131877e+00, -5.61421208e+00, -7.68133496e+00, -9.53885020e+00, -1.05100318e+01, -6.79552591e+00, 3.41064419e+00, -1.99401837e+00, -6.64367602e+00, -6.65880536e+00, -9.54188421e-01, -2.80532427e+00, 1.63760199e+00, -1.05456847e+00, -3.15590522e-01, -4.80004252e+00, -1.15862171e+01, -2.39657737e+00, -7.46323639e+00, -7.66286163e+00, -3.02662796e+00, -6.50743734e+00, -4.70285895e+00, -5.50338362e+00, -4.31695187e+00, -6.35740704e+00, -1.63047643e+00, -4.35674535e+00, -3.21831630e+00, 3.34209691e-01, -5.53997528e+00, 6.28980040e-01, -4.36189354e+00, 1.90048355e+00, -1.01413163e+01, -1.13838067e+01, 4.05479620e-02, -7.30628473e+00, -8.49949120e+00, -8.43556197e-01, -9.20431606e+00, -5.45611005e+00, -4.93128782e+00, -2.37351358e+00, 2.76822347e+00, -5.30959231e+00, -1.08561557e+01, -6.22998461e+00, -3.44325351e+00, -8.26989813e+00, -8.16012220e+00, -3.65239534e+00, -3.37657614e+00, -4.13252343e+00, -6.97641901e+00, -3.26760087e+00, -8.68897665e+00, 1.98491035e+00, -3.19725271e+00, -2.97601309e+00, -6.35236256e-01, -1.43536820e+00, -1.83119973e+00, -6.83683113e+00, -3.58014874e+00, -6.00212658e+00, -3.94953401e-01, -1.22910109e+01, -2.23793123e+00, -1.12536312e+00, -7.43611722e+00, 2.70782164e+00, -1.30189714e+00, -7.98477860e+00, 1.45176945e+00, -6.37576937e+00, -1.15745664e+01, -8.31705564e+00, -1.31788332e+01, -1.02247489e+01, -2.38040360e+00, -8.28359587e-02, -4.84217994e+00, -8.43086346e+00, -5.59245498e+00, -8.01462814e+00, -5.04388668e+00, -1.18133306e+01, -9.95755988e+00, -9.09531855e+00, -1.14436056e+01, -2.50613812e+00, -8.25491317e+00, -3.65636492e+00, -6.51975907e+00, -1.97962394e+00, -4.61060451e+00, -5.83123968e+00, -1.03119035e+01, 1.90173983e+00, -6.30842034e+00, -4.16783869e+00, -9.01738210e-01, 3.11343949e+00, -7.95184114e+00, -1.14235252e+01, -9.82701996e+00, -7.96526477e+00, -6.74009998e+00, -9.81715755e+00, -7.48599509e+00, -3.63037299e+00, -1.66217497e-01, 3.55175894e+00, -1.41256886e+00, -6.93067023e+00, -9.44393057e+00, -1.71264733e+00, -3.03800330e+00, -4.59951132e+00, -7.77866756e+00, -5.67666133e+00, -5.79887269e+00, -8.32056428e+00, -9.04792819e+00, -6.39460287e+00, -4.58781879e+00, -7.59116972e+00, 2.45013943e+00, -5.90729760e+00, -3.05102659e+00, -1.38851889e+01, -3.89283252e+00, -8.81340055e+00, -1.11319853e+01, -1.07385083e+01, 4.53965038e-02, -8.81471206e+00, -8.80425917e-01, -1.30528774e+00, -6.00202651e+00, -5.01808294e+00, -1.47469339e+00, -5.29226613e-01, -1.14175910e+01, -4.79454072e+00, 2.38303822e+00, -8.96353910e+00, -6.81220032e-01, -4.80553899e+00, -1.04463321e+01, -1.27067908e+01, -6.36154610e+00, -7.47320009e+00, -1.45371254e+00, 7.96409021e-01, -9.44438983e+00, -4.79202108e+00, -3.73254897e-01, -1.12059609e+01, -1.24007836e+01, -6.15022917e-01, -6.99438722e+00, -6.18399424e+00, -4.69744665e+00, -1.79822699e+00, -8.26295538e-01, -3.76708853e+00, -3.62749266e+00, 2.34738836e+00, -7.10267782e+00, -1.34206963e+01, -1.11702989e+01, -6.99498162e+00, -7.36555320e-01, 1.22982860e+00, 3.72274984e+00, -1.02669545e+01, -3.82075997e+00, -5.33290183e+00, -8.29611948e+00, -1.63004509e+00, -6.30775320e+00, -8.61458228e+00, -1.13963836e+01, -2.66274351e+00, -1.22550058e+01, -4.22974000e+00, -3.09345152e+00, -5.55513160e-01, 3.08365433e-01, -8.17308095e+00, -7.88595225e+00, -3.98464385e+00, -6.41483873e+00, -7.81279145e+00, -3.61886113e-01, -4.05744800e+00, -4.35100872e+00, -4.29142425e+00, -1.00772175e+01, -6.22203897e+00, -3.22321771e-01, -1.31727375e+01, -5.71078190e+00, -5.96881650e+00, 1.91351991e+00, -9.42375907e+00, -3.47481711e+00, -5.34999228e-01, -2.26454915e+00, 6.44903301e-01, -9.16823443e+00, -1.03436739e+01, -6.18024838e+00, 4.13653034e+00, -9.00210912e+00, -4.51883986e+00, -3.79124717e+00, 7.50984073e-02, 1.98361855e+00, -9.73683582e+00, -7.65330137e+00, -1.08280985e+01, -3.97637375e+00, -6.67524595e+00, -4.36978037e+00, 3.88172725e+00, -3.74553570e+00, -1.05110091e+01, -2.57447444e+00, -5.95666188e+00, -7.69082352e+00, -9.15091010e-01, -1.85787007e+00, -9.07296598e-01, -6.34239737e+00, -7.91044883e-01, 5.82982079e-01, 1.30357641e+00, 3.43644292e+00, -9.94524045e+00, -1.28104834e+00, -9.94438369e-01, -8.60551648e+00, -3.39012483e+00, -5.63005354e+00, -4.15150494e+00, 1.03334704e+00, -1.40651153e+00, 2.65859266e+00, -2.19981209e-01, -1.30737173e+01, 2.92690243e+00, 1.10891214e+00, -9.30149032e+00, -1.17744041e+01, 3.12497893e+00, -5.82930271e+00, -1.17437815e+01, -1.36455778e+00, -2.30667628e+00, -1.97132849e+00, -8.06557828e-01, -1.02938371e+01, -9.98009132e+00, -8.77655168e+00, -1.04967425e+01, -9.42577228e-01, -1.02926325e+01, -1.14848228e+01, -3.99942449e+00, -1.18469186e+01, 1.44423523e+00, -1.34117793e+00, -2.73547074e+00, -1.59311046e-01, 9.92165178e-01, 2.45299305e+00, -8.99662109e+00, -2.65756427e+00, -1.11028445e+00, -3.20704954e+00, -3.13673354e+00, -7.15634467e+00, -9.65081313e+00, -8.34870752e+00, -9.49215409e+00, -9.34277288e+00, -4.07898253e+00, -1.22224573e+01, -6.68317634e+00, -7.70016561e+00, -4.48426520e+00, -5.71848934e+00, -4.74376381e+00, -1.02707365e+01, -2.43782738e+00, -3.84155026e+00, -6.88255959e+00, -5.72448663e+00, -5.84517963e+00, -4.57448682e+00, 3.23045052e+00, -8.38560016e+00, -4.77830136e+00, -1.72709695e+00, -7.42705188e+00, -3.35806542e+00, -2.29080379e+00, -1.52672241e+00, -7.15953033e+00, 1.38939911e+00, -4.17810171e+00, -8.81908719e+00, -4.28948300e-02, -3.89496570e+00, -5.37450404e+00, -1.22528744e+01, -2.57383380e+00, 2.95344252e+00, -9.29170183e+00, -6.51623205e+00, -9.07827726e+00, -7.42225082e+00, -4.61260358e+00, -1.01598835e+01, -7.55572820e+00, -2.86933966e+00, -1.10939730e+01, -3.75372675e+00, -1.84836650e+00, -4.60099142e+00, -9.62973433e+00, -8.28066052e+00, -6.17187775e+00, -3.17268614e-01, 2.50624957e+00, -7.51678783e+00, -4.54974227e+00, -1.05302712e+01, -3.24786133e+00, -1.01087185e+01, -7.77737322e+00, -3.93957154e+00, -6.79004417e+00, -7.46293511e+00, -1.20263722e+00, -6.58951927e+00, -7.85714642e-01, -8.26484256e+00, -5.34088685e+00, -4.85377007e+00, -4.51029740e+00, -6.28642956e+00, -1.22361881e+00, -5.43201339e+00, -1.03210171e+01, -3.27769455e+00, -8.82829810e+00, -3.09031010e+00, -2.11451359e-01, -3.95161575e+00, 3.20272025e-01, 4.08199915e+00, -1.16450963e+01, -3.86611736e-01, -8.89070809e+00, -2.43269290e+00, -8.17589779e+00, 5.27687587e-02, 7.95265503e-02, -1.12357062e+01, -9.30857563e+00, -4.00169556e+00, -1.06421113e+01, 1.67814463e+00, -8.40963087e+00, -6.74343947e+00, -9.91022812e+00, -8.55406642e+00, -6.58137669e-01, 9.12993785e-01, -8.96767806e+00, -7.79584492e+00, -6.82144053e+00, -6.04507084e+00, -4.97831468e+00, -2.71617328e+00, -7.40601451e-01, -1.03338704e+00, -8.34161822e+00, -8.54512729e+00, -1.04387831e+01, -9.96275359e+00, 1.07272594e+00, -6.81087530e+00, -1.77933612e+00, -1.17804456e+01, -4.12071569e+00, -5.14860474e+00, -3.57973720e+00, -5.01382828e+00, -6.49880895e+00, -5.42213891e+00, -3.55793919e+00, -8.05525819e+00, -8.98807805e+00, -4.87702689e+00, -3.59277555e+00, -3.53341517e+00, -6.60028496e+00, -1.42989194e+00, -1.09926258e+01, -6.60732381e+00, -5.60788580e+00, -3.89380587e+00, -3.15120700e+00, -6.77027186e+00, -1.27772994e+01, 3.14240827e+00, -3.72578232e+00, 2.74793961e+00, -1.75525588e+00, -3.73275389e+00, 4.81143932e+00, -3.20756869e+00, 6.95907083e-01, -4.06010492e+00, -4.07126372e+00, -9.25259913e+00, -2.15543165e+00, 1.21233094e+00, -1.87865175e+00, -3.62546517e+00, -7.31149193e+00, -4.10166229e+00, 3.72100873e+00, -6.34708609e+00, -9.89380845e+00, -6.63004456e+00, -4.26234286e+00, -6.55038280e+00, -4.24793920e+00, -3.04413392e+00, -1.08241860e+00, -3.79316617e+00, -1.23621481e+01, -1.22675428e+01, -5.45983755e+00, 3.08969231e+00, -1.74487779e+00, -1.37335099e+00, -9.80296012e+00, -5.81055698e+00, -4.92560755e+00, -1.37365587e+00, -7.09337964e+00, -7.59228908e-01, -7.33295825e+00, -4.86772283e+00, -1.19459983e+00, -9.54478666e+00, 1.72004222e+00, 8.81683850e-01, -2.30735111e+00, -8.80141319e+00, -2.38785375e+00, -1.00187577e+01, -2.34411376e+00, -9.43522477e-02, -9.41174915e+00, -5.26914822e+00, -8.25232672e+00, -4.49020852e+00, -7.62037781e+00, -5.55849410e+00, -4.72915243e+00, -5.49150390e+00, -8.00481860e+00, -4.97218612e+00, -9.64852363e+00, -6.03485495e+00, -4.68468106e+00, -5.48764384e+00, -1.03865922e+01, -3.52423165e+00, 1.88853423e+00, 4.38837369e-01, -2.98658694e+00, -7.25181426e+00, -3.45997927e+00, -5.62963012e+00, -8.87858820e+00, -1.53712642e+00, -7.37930470e+00, -5.33022482e-01, -5.75946163e+00, -7.73423040e+00, -8.96950674e+00, -7.82739854e+00, -1.32311535e+00, 2.54352394e+00, -1.67417399e+00, -6.82708857e+00, 1.09073271e+00, -9.28605812e+00, -5.72053761e-01, 2.39803726e+00, 1.94913935e-01, -1.92101352e+00, 6.07567657e-01, -2.59068256e+00, -1.48381517e+00, 1.07498227e+00, -5.90475975e+00, -1.08138300e+00, -5.06536942e+00, 1.84470641e+00, -4.42763082e+00, -4.27465045e+00, -2.72370953e+00, -6.67654673e+00, 3.21526564e-01, -4.06934293e-01, -1.82826315e+00, 2.40178894e+00, -1.24021747e+00, -3.00960671e+00, -8.85605994e+00, -4.75660527e+00, -7.62201041e+00, -2.81552601e+00, -7.83564300e+00, -8.58819305e+00, -7.72505309e+00, -3.10480179e+00, 2.11971392e+00, -4.66745492e+00, -7.73036935e+00, -1.04163911e+01, -7.73750653e+00, -8.42701198e+00, -6.53766579e+00, -6.54388231e+00, 8.67642064e-01, -5.67923755e+00, 1.20856970e-01, -4.80730417e+00, -1.26323463e+00, -6.59838866e+00, -7.00852324e+00, -7.66478084e+00, -2.85344225e+00, -1.23613899e+01, -1.52074150e+00, -2.44088580e+00, -6.75520331e+00, -2.71076236e+00, -9.57244441e+00, -6.26352766e+00, -2.64653779e+00, -8.17582658e+00, -5.81848894e+00, -5.09344954e+00, -7.85867728e+00, -4.91421527e+00, -3.98655078e+00, -1.02702616e+01, -4.57216333e+00, -5.13763012e+00, 9.13255316e-01, -7.01517890e+00, -4.67859381e+00, -4.65243538e+00, 8.68084894e-01, -7.71832476e+00, -4.87155713e+00, -1.17869092e+00, -5.83701323e+00, -9.46306209e+00, -1.11468086e+01, -1.70768262e+00, -3.42030140e+00, 2.63163325e+00, -3.12330976e+00, -9.67868951e+00, -7.87475496e+00, -5.76928465e+00, -3.74725901e+00, -3.03473120e+00, -5.92154702e+00, -4.36325622e+00, 4.20917055e-01, 1.17719635e+00, -5.49124485e+00, -3.66010495e+00, -1.32430020e+01, -1.59325093e+00, 7.85812543e-01, 2.86438847e+00, -1.04544875e+01, -7.63033365e+00, -1.45477135e+00, -7.94056670e+00, -4.46716374e+00, -4.45110764e+00, -2.85111514e+00, -4.06691097e+00, -1.64206419e+00, -1.14993586e+01, -3.19053671e+00, -1.39816675e+01, -3.42872262e+00, -1.33919441e+01, -1.50946012e+00, -1.84062819e+00, -1.31928671e+00, -9.25888088e+00, 4.42719713e-01, -5.30548250e+00, -4.07230401e+00, -6.00223733e+00, -6.07079925e+00, -7.43888996e+00, -3.20556292e+00, -4.13299247e+00, -7.54650016e+00, 1.78967476e+00, -2.35111352e+00, -8.69760447e-01, 9.90663156e-01, -3.56268864e+00, -7.37652894e+00, -2.04636115e+00, -1.04600203e+01, -9.30892135e+00, -5.42961964e+00, -7.88732410e+00, -4.81113333e+00, -4.93193479e+00, -2.80579067e+00, -1.82393024e+00, -1.04323739e+01, -4.28698988e+00, -1.80167609e+00, -7.37293006e+00, -2.20507690e+00, -1.02402708e+00, -1.01730445e+01, -4.80618581e+00, -5.04012637e+00, -2.58856086e+00, 7.35067306e-01, -5.79344637e+00, -3.65077878e+00, -7.80925639e+00, -5.89878717e+00, -4.93254332e+00, -5.53440867e+00, -4.76157268e+00, -4.68845053e+00, -5.57727291e+00, -3.52393871e+00, -7.17105497e+00, -1.11728059e+01, -9.40603142e+00, -7.28298831e+00, -7.37330757e+00, -2.47630109e+00, -3.08654040e+00, -1.00302193e+01, 1.85022487e+00, -5.60602231e+00, -3.72507893e-02, -1.34293400e+01, 2.38770239e+00, 1.40610743e+00, -8.20593892e+00, 1.83936670e+00, -1.35241811e-01, -1.83367814e+00, -3.56177883e+00, -9.86855423e+00, 1.24610864e+00, -9.96943973e+00, 3.41536582e+00, 1.19634105e-01, -1.15777392e+01, -6.80181294e-01, -4.65025023e+00, -3.62740243e+00, -7.95496877e+00, -8.72892090e+00, -6.33840465e+00, -3.61231276e+00, -1.07657070e+01, 4.03514406e+00, -9.96586273e+00, -4.10895216e+00, -5.94273386e+00, -6.37670194e+00, -6.07264382e+00, -1.27047656e+01, -6.13323811e+00, -6.30467837e-01, -1.06727165e+01, -1.08393529e+01, -7.08665721e+00, -1.74411307e+00, -2.09278158e+00, -5.81026459e+00, -7.36299103e+00, 1.76801993e-01, -8.55487109e+00, -8.14534051e+00, -6.62276616e+00, -5.60164994e+00, -7.51197385e+00, -3.03627112e+00, -1.06606392e+01, -7.21811608e+00, -4.67645698e+00, -5.63176703e+00, 2.36985078e+00, 4.54648361e-01, -6.13320955e+00, -3.84922192e-01, 1.31073971e+00, -1.08142571e+01, -2.02832895e+00, -7.02957354e+00, -5.41761905e-02, -3.91260289e+00, -3.01550374e+00, -5.51082162e+00, -6.29511509e-01, -6.73133516e+00, -3.85801529e+00, -5.32790825e+00, -2.36435448e+00, -7.35879342e+00, -7.80626821e+00, -1.08651224e+01, -1.22077247e+01, -1.72548977e+00, -7.56471150e+00, 9.01176149e-01, 1.68103230e+00, 1.90021378e+00, -3.34327055e+00, -4.47146024e+00, -5.39974189e+00, -5.97112415e-01, -9.58022439e+00, 1.48137600e+00, -4.88985355e+00, -1.30301651e+01, -5.00369718e+00, -9.61487404e+00, -4.43356878e+00, 3.61044363e+00, -5.55436654e+00, -2.62715816e+00, -1.05552013e+01, 1.63957516e+00, -3.64759181e+00, 1.98301047e+00, -3.66197452e+00, -7.32143209e+00, -2.50982039e+00, -2.56543471e-01, -2.43993760e+00, -7.36608847e+00, -8.61598409e+00, -3.21398021e+00, -9.30326294e+00, 5.22281321e-01, -8.09136780e+00, -3.81069207e+00, -8.44085261e+00, -9.35916314e+00, -4.52282128e+00, -5.00881991e+00, -9.23324118e+00, -1.13442513e+01, -8.73547497e-01, -7.69718292e+00, -8.31681213e-01, -7.95916284e+00, -1.18261740e+01, -6.55794946e+00, 1.44015682e+00, -5.51825404e+00, -4.50040096e+00, -5.38829096e+00, -4.51596323e-01, -3.88390064e+00, -7.24791279e+00, -3.71560273e+00, -8.92449463e+00, -5.81680208e+00, -8.09331248e+00, -9.46684186e+00, -5.20892061e+00, -4.54301414e+00, 1.28993855e-01, -6.52048158e+00, -8.24352729e-01, 1.24103340e+00, 3.82915836e+00, 3.67357684e+00, -1.30485596e+01, -7.86734008e+00, -7.14722582e+00, -3.84099809e+00, -3.06375613e+00, 9.54722629e-03, -7.44188312e+00, -3.77250319e+00, -1.21915092e+00, -4.67546451e+00, -3.31843505e+00, -9.61460916e+00, -7.71023115e+00, -9.78000699e+00, -1.10555064e+01, -4.08211026e+00, -7.64443134e+00, -9.50546371e+00, -2.19049900e+00, -3.51669288e+00, -8.63682763e+00, -3.70902882e+00, -4.30866182e+00, -8.10767018e+00, -8.59837271e+00, 7.27625818e-01, -4.80659742e+00, 1.94435086e+00, -4.89249056e+00, -2.02400868e+00, 3.19390833e+00, -1.12532835e+01, -2.60750381e+00, -7.38689731e+00, -7.02148883e+00, -4.42831149e+00, -9.40239403e+00, -5.81466194e+00, 5.98799306e-01, -5.42262462e+00, -1.00114511e+01, -1.00917454e+01, -5.96063566e+00, -4.03877092e+00, -2.11072571e+00, -7.61119896e-01, -5.11781728e+00, -2.12417644e+00, -2.49549857e+00, -4.56584188e+00, -8.89609212e+00, -5.98695918e+00, -4.50459510e+00, -5.48964093e+00, -1.22009734e+00, -6.82804528e+00, -8.10682477e+00, -2.13051933e+00, -1.27086180e+01, -4.77706437e-01, -4.17804175e-01, -7.47639355e+00, -3.92365772e+00, -3.68904683e+00, -6.02127202e+00, -6.64214053e+00, -2.30170385e+00, 8.98234603e-01, -5.83641602e+00, -2.37895667e+00, -2.22222090e+00, -4.59664918e+00, -7.49653989e+00, -1.87036275e+00, -1.22498618e+01, -1.10167711e+00, -1.34274079e+01, -5.63065188e+00, -4.46637883e+00, -1.10721886e+01, 9.36980196e-02, -2.48332508e+00, -4.63881017e+00, -2.40032336e+00, -6.42043980e+00, -6.70592646e+00, -6.08450406e+00, -5.04115096e+00, 9.42003286e-01, -9.39342667e+00, -4.48678100e+00, -1.56138267e+00, -1.05094258e+01, -3.08486281e+00, -2.34922376e+00, -4.39329789e+00, 2.55357531e-01, 3.06697424e+00, -2.20958347e-01, -8.21986058e+00, -8.33623892e+00, -3.65884164e+00, 3.28898884e+00, -4.52637024e+00, -1.13051108e+01, -1.16469084e+01, -3.68930331e+00, -3.13839826e+00, -6.02202284e+00, -4.67568210e+00, 4.23850152e-01, -7.25093495e+00, -7.73635633e+00, -4.35262873e+00, -1.11854737e+01, -7.57134575e+00, -2.40640231e+00, 1.08377997e+00, -6.08524054e+00, -4.51397471e+00, -7.49924497e-01, -4.81218170e+00, -8.22002158e+00, -7.11292835e+00, -9.60188131e+00, -6.79131427e+00, -1.45666460e+00, -1.33989615e+00, -8.74040890e+00, -3.41619591e+00, -4.55041467e+00, -5.16307108e+00, -1.55819029e+00, -8.55376233e+00, -6.10674716e+00, -6.96645707e-01, 1.01386623e+00, -4.53084910e+00, -5.09240392e+00, -1.63394356e+00, -3.67228671e+00, -4.19211005e+00, -4.73552991e+00, -6.17131176e+00, -2.58131638e+00, -1.00986694e+01, 3.57186249e+00, -3.22008193e+00, -6.38516292e+00, 4.82826953e-01, -6.50423276e+00, -1.02781032e+01, -6.09614982e+00, 3.02616712e+00, -1.75357125e+00, 1.62406080e+00, -6.13605447e+00, -4.90330120e+00, -3.25243059e+00, 3.45790668e-01, 5.27927617e-01, -1.07615691e+01, -6.98209583e+00, 1.00905065e+00, -8.32882966e-01, -4.97655136e+00, 2.45568101e+00]) . p = np.exp(u)/(1+np.exp(u)) . p . array([1.07690961e-01, 1.89264320e-01, 4.93436800e-02, 5.43767196e-04, 1.31899260e-06, 2.10929774e-02, 6.49352562e-02, 9.68948404e-04, 3.86941086e-02, 1.31251048e-05, 3.12806307e-01, 1.87898276e-04, 1.67658802e-02, 1.19105266e-02, 5.31738078e-02, 3.44834509e-02, 3.35872003e-01, 5.67740862e-03, 4.53394891e-04, 3.00168377e-05, 4.60691859e-06, 1.57595165e-03, 3.63243837e-03, 4.61145837e-04, 7.19944017e-05, 2.72608464e-05, 1.11751920e-03, 9.68035542e-01, 1.19832387e-01, 1.30053780e-03, 1.28103463e-03, 2.78043277e-01, 5.70371394e-02, 8.37208376e-01, 2.58348795e-01, 4.21750746e-01, 8.16222695e-03, 9.29321091e-06, 8.34340617e-02, 5.73467084e-04, 4.69739871e-04, 4.62373048e-02, 1.49007545e-03, 8.98779819e-03, 4.05644497e-03, 1.31648596e-02, 1.73085566e-03, 1.63765106e-01, 1.26577714e-02, 3.84822364e-02, 5.82783306e-01, 3.91126583e-03, 6.52258153e-01, 1.25935928e-02, 8.69946244e-01, 3.94153319e-05, 1.13781234e-05, 5.10135602e-01, 6.70856161e-04, 2.03530488e-04, 3.00786337e-01, 1.00594129e-04, 4.25197757e-03, 7.16548808e-03, 8.52148451e-02, 9.40934330e-01, 4.91961960e-03, 1.92851546e-05, 1.96561097e-03, 3.09706924e-02, 2.56045804e-04, 2.85745791e-04, 2.52736271e-02, 3.30355928e-02, 1.57890525e-02, 9.32769713e-04, 3.66995496e-02, 1.68403938e-04, 8.79203635e-01, 3.92692392e-02, 4.85213614e-02, 3.46324183e-01, 1.92263634e-01, 1.38095413e-01, 1.07234864e-03, 2.71157931e-02, 2.46738346e-03, 4.02525441e-01, 4.59282383e-06, 9.63955880e-02, 2.45017836e-01, 5.89222539e-04, 9.37486607e-01, 2.13845905e-01, 3.40491925e-04, 8.10270605e-01, 1.69941665e-03, 9.40211572e-06, 2.44254480e-04, 1.89018637e-06, 3.62603694e-05, 8.46792782e-02, 4.79302844e-01, 7.82807372e-03, 2.17985617e-04, 3.71203912e-03, 3.30481897e-04, 6.40731728e-03, 7.40512670e-06, 4.73659357e-05, 1.12177207e-04, 1.07176744e-05, 7.54289940e-02, 2.59910527e-04, 2.51760211e-02, 1.47185464e-03, 1.21358932e-01, 9.84785925e-03, 2.92585124e-03, 3.32340123e-05, 8.70088313e-01, 1.81759771e-03, 1.52495436e-02, 2.88693426e-01, 9.57443719e-01, 3.51889591e-04, 1.09350632e-05, 5.39704471e-05, 3.47199149e-04, 1.18113220e-03, 5.45053304e-05, 5.60570348e-04, 2.58218542e-02, 4.58541035e-01, 9.72125129e-01, 1.95829195e-01, 9.76391327e-04, 7.91623510e-05, 1.52820660e-01, 4.57382404e-02, 9.95661782e-03, 4.18394395e-04, 3.41328381e-03, 3.02181064e-03, 2.43399189e-04, 1.17620665e-04, 1.66776309e-03, 1.00725397e-02, 5.04635345e-04, 9.20571646e-01, 2.71215046e-03, 4.51731733e-02, 9.32692934e-07, 1.99801700e-02, 1.48704526e-04, 1.46363854e-05, 2.16928044e-05, 5.11347177e-01, 1.48509655e-04, 2.93089526e-01, 2.13276445e-01, 2.46762978e-03, 6.57370062e-03, 1.86230289e-01, 3.70697286e-01, 1.10001464e-05, 8.20688802e-03, 9.15524705e-01, 1.27976093e-04, 3.35989059e-01, 8.11784972e-03, 2.90538021e-05, 3.03046700e-06, 1.72371867e-03, 5.67784825e-04, 1.89430860e-01, 6.89205812e-01, 7.91260061e-05, 8.22742223e-03, 4.07754758e-01, 1.35927439e-05, 4.11534591e-06, 3.50914256e-01, 9.16174407e-04, 2.05793076e-03, 9.03613391e-03, 1.42067029e-01, 3.04428928e-01, 2.25968535e-02, 2.58944083e-02, 9.12726417e-01, 8.22221788e-04, 1.48410624e-06, 1.40862284e-05, 9.15630488e-04, 3.23757859e-01, 7.73788574e-01, 9.76402862e-01, 3.47618780e-05, 2.14413386e-02, 4.80681661e-03, 2.49420850e-04, 1.63824185e-01, 1.81880850e-03, 1.81407676e-04, 1.12359197e-05, 6.52079009e-02, 4.76120141e-06, 1.43473324e-02, 4.33781829e-02, 3.64586262e-01, 5.76486232e-01, 2.82067810e-04, 3.75847091e-04, 1.82594583e-02, 1.63440824e-03, 4.04363677e-04, 4.10503068e-01, 1.69991273e-02, 1.27296660e-02, 1.35006578e-02, 4.20244272e-05, 1.98126016e-03, 4.20110019e-01, 1.90174352e-06, 3.29916288e-03, 2.55074321e-03, 8.71414076e-01, 8.07752587e-05, 3.00373164e-02, 3.69351654e-01, 9.41018519e-02, 6.55861016e-01, 1.04289620e-04, 3.21947834e-05, 2.06563798e-03, 9.84273093e-01, 1.23134628e-04, 1.07840992e-02, 2.20693893e-02, 5.18765783e-01, 8.79066373e-01, 5.90636497e-05, 4.74250105e-04, 1.98338918e-05, 1.84083008e-02, 1.26017218e-03, 1.24958961e-02, 9.79801215e-01, 2.30778046e-02, 2.72342185e-05, 7.07993787e-02, 2.58185517e-03, 4.56792912e-04, 2.85959190e-01, 1.34951506e-01, 2.87553355e-01, 1.75698519e-03, 3.11944357e-01, 6.41753294e-01, 7.86436271e-01, 9.68824257e-01, 4.79530376e-05, 2.17371826e-01, 2.70036309e-01, 1.83059457e-04, 3.26055175e-02, 3.57555275e-03, 1.54967795e-02, 7.37564274e-01, 1.96784863e-01, 9.34538624e-01, 4.45225406e-01, 2.09969306e-06, 9.49160410e-01, 7.51926246e-01, 9.12797489e-05, 7.69906419e-06, 9.57911422e-01, 2.93150737e-03, 7.93847447e-06, 2.03500543e-01, 9.05715415e-02, 1.22246266e-01, 3.08624486e-01, 3.38398663e-05, 4.63106951e-05, 1.54285469e-04, 2.76255314e-05, 2.80380049e-01, 3.38806548e-05, 1.02849067e-05, 1.79963778e-02, 7.16053597e-06, 8.09109644e-01, 2.07316416e-01, 6.09124720e-02, 4.60256261e-01, 7.29515373e-01, 9.20780052e-01, 1.23812168e-04, 6.55243175e-02, 2.47817862e-01, 3.89012962e-02, 4.16172078e-02, 7.79292370e-04, 6.43690585e-05, 2.36646239e-04, 7.54357299e-05, 8.75885332e-05, 1.66429999e-02, 4.91872020e-06, 1.25023049e-03, 4.52547303e-04, 1.11592427e-02, 3.27391546e-03, 8.63068030e-03, 3.46306609e-05, 8.03332787e-02, 2.10094375e-02, 1.02446518e-03, 3.25440331e-03, 2.88546486e-03, 1.02063459e-02, 9.61964240e-01, 2.28076772e-04, 8.34013006e-03, 1.50959289e-01, 5.94585136e-04, 3.36320423e-02, 9.18874567e-02, 1.78473742e-01, 7.76815685e-04, 8.00496297e-01, 1.50961881e-02, 1.47861421e-04, 4.89277936e-01, 1.99384432e-02, 4.61184837e-03, 4.77135985e-06, 7.08415362e-02, 9.50425940e-01, 9.21775439e-05, 1.47704740e-03, 1.14105013e-04, 5.97444929e-04, 9.82838563e-03, 3.86902790e-05, 5.22831584e-04, 5.36901925e-02, 1.52034494e-05, 2.28938551e-02, 1.36064803e-01, 9.94203835e-03, 6.57401919e-05, 2.53305608e-04, 2.08296506e-03, 4.21341551e-01, 9.24578779e-01, 5.43581146e-04, 1.04593734e-02, 2.67146636e-05, 3.74038135e-02, 4.07213025e-05, 4.18936064e-04, 1.90852169e-02, 1.12365506e-03, 5.73639784e-04, 2.31006401e-01, 1.37281346e-03, 3.13089559e-01, 2.57343205e-04, 4.76876925e-03, 7.73856710e-03, 1.08756104e-02, 1.85793574e-03, 2.27300234e-01, 4.35522880e-03, 3.29325172e-05, 3.63443750e-02, 1.46505935e-04, 4.35087279e-02, 4.47333249e-01, 1.88610388e-02, 5.79390545e-01, 9.83406298e-01, 8.76183598e-06, 4.04533222e-01, 1.37643199e-04, 8.07134318e-02, 2.81274610e-04, 5.13189129e-01, 5.19871166e-01, 1.31943822e-05, 9.06353475e-05, 1.79562863e-02, 2.38879803e-05, 8.42658693e-01, 2.22662462e-04, 1.17719904e-03, 4.96616384e-05, 1.92722513e-04, 3.41158082e-01, 7.13612393e-01, 1.27447567e-04, 4.11271790e-04, 1.08896227e-03, 2.36391165e-03, 6.83856929e-03, 6.20257265e-02, 3.22872637e-01, 2.62427983e-01, 2.38329455e-04, 1.94452670e-04, 2.92739539e-05, 4.71205799e-05, 7.45114969e-01, 1.10051566e-03, 1.44385129e-01, 7.65269093e-06, 1.59735949e-02, 5.77396970e-03, 2.71266519e-02, 6.60154408e-03, 1.50296862e-03, 4.39825737e-03, 2.77078870e-02, 3.17327698e-04, 1.24874299e-04, 7.56201462e-03, 2.67846727e-02, 2.83762760e-02, 1.35813341e-03, 1.93115522e-01, 1.68250352e-05, 1.34862013e-03, 3.65540674e-03, 1.99611199e-02, 4.10437454e-02, 1.14606771e-03, 2.82415249e-06, 9.58608542e-01, 2.35273694e-02, 9.39796881e-01, 1.47385504e-01, 2.33677367e-02, 9.91929522e-01, 3.88818908e-02, 6.67279696e-01, 1.69547866e-02, 1.67697984e-02, 9.58529807e-05, 1.03824745e-01, 7.70711122e-01, 1.32543813e-01, 2.59455986e-02, 6.67374279e-04, 1.62758631e-02, 9.76362713e-01, 1.74878082e-03, 5.04837563e-05, 1.31836389e-03, 1.38935054e-02, 1.42752751e-03, 1.40922304e-02, 4.54714058e-02, 2.53048592e-01, 2.20280107e-02, 4.27745469e-06, 4.70188312e-06, 4.23622483e-03, 9.56465555e-01, 1.48694424e-01, 2.02078983e-01, 5.52846424e-05, 2.98681326e-03, 7.20601165e-03, 2.02029828e-01, 8.29896238e-04, 3.18813702e-01, 6.53210137e-04, 7.63216091e-03, 2.32437269e-01, 7.15683065e-05, 8.48134274e-01, 7.07171035e-01, 9.05159727e-02, 1.50497558e-04, 8.41036102e-02, 4.45542835e-05, 8.75347804e-02, 4.76429422e-01, 8.17511314e-05, 5.12162757e-03, 2.60583468e-04, 1.10938501e-02, 4.90116201e-04, 3.83977591e-03, 8.75659983e-03, 4.10472277e-03, 3.33738638e-04, 6.88031932e-03, 6.45165903e-05, 2.38812693e-03, 9.15116261e-03, 4.12053247e-03, 3.08423119e-05, 2.86305750e-02, 8.68588314e-01, 6.07981964e-01, 4.80355221e-02, 7.08384950e-04, 3.04726458e-02, 3.57706160e-03, 1.39321334e-04, 1.76953397e-01, 6.23645453e-04, 3.69812218e-01, 3.14289955e-03, 4.37397620e-04, 1.27214749e-04, 3.98502368e-04, 2.10300447e-01, 9.27137241e-01, 1.57868471e-01, 1.08283574e-03, 7.48519670e-01, 9.26991897e-05, 3.60763065e-01, 9.16677512e-01, 5.48574795e-01, 1.27748588e-01, 6.47385752e-01, 6.97404877e-02, 1.84851852e-01, 7.45543251e-01, 2.71902349e-03, 2.53244386e-01, 6.27199268e-03, 8.63504376e-01, 1.18018046e-02, 1.37258905e-02, 6.15887229e-02, 1.25853610e-03, 5.79696242e-01, 3.99647448e-01, 1.38445311e-01, 9.16963617e-01, 2.24398134e-01, 4.69937561e-02, 1.42495171e-04, 8.52149670e-03, 4.89317085e-04, 5.64909230e-02, 3.95231729e-04, 1.86257706e-04, 4.41428446e-04, 4.29096198e-02, 8.92804553e-01, 9.30868725e-03, 4.39088954e-04, 2.99368312e-05, 4.35967618e-04, 2.18826619e-04, 1.44577090e-03, 1.43682399e-03, 7.04254824e-01, 3.40453166e-03, 5.30177519e-01, 8.10364893e-03, 2.20417571e-01, 1.36070777e-03, 9.03326069e-04, 4.68839629e-04, 5.45036556e-02, 4.28069913e-06, 1.79352356e-01, 8.01076132e-02, 1.16344781e-03, 6.23412730e-02, 6.96161465e-05, 1.90089516e-03, 6.62027221e-02, 2.81294635e-04, 2.96328560e-03, 6.09938334e-03, 3.86235379e-04, 7.28797223e-03, 1.82253060e-02, 3.46471110e-05, 1.02298449e-02, 5.83731388e-03, 7.13665839e-01, 8.97339176e-04, 9.20652346e-03, 9.44822375e-03, 7.04347048e-01, 4.44407216e-04, 7.60317501e-03, 2.35287653e-01, 2.90905637e-03, 7.76623668e-05, 1.44210292e-05, 1.53464532e-01, 3.16669848e-02, 9.32869902e-01, 4.21559250e-02, 6.25995721e-05, 3.80077603e-04, 3.11227354e-03, 2.30389840e-02, 4.58812678e-02, 2.67388053e-03, 1.25766591e-02, 6.03702672e-01, 7.64443326e-01, 4.10578186e-03, 2.50843953e-02, 1.77270528e-06, 1.68927005e-01, 6.86931496e-01, 9.46057693e-01, 2.88178288e-05, 4.85263250e-04, 1.89268337e-01, 3.55877978e-04, 1.13495388e-02, 1.15311206e-02, 5.46237026e-02, 1.68417202e-02, 1.62184384e-01, 1.01364900e-05, 3.95234004e-02, 8.46912581e-07, 3.14097711e-02, 1.52739693e-06, 1.81018818e-01, 1.36977015e-01, 2.10936990e-01, 9.52528010e-05, 6.08906893e-01, 4.93977979e-03, 1.67526542e-02, 2.46711090e-03, 2.30400604e-03, 5.87592002e-04, 3.89569161e-02, 1.57817655e-02, 5.27676064e-04, 8.56887396e-01, 8.69773046e-02, 2.95304150e-01, 7.29218888e-01, 2.75802225e-02, 6.25377859e-04, 1.14420584e-01, 2.86588297e-05, 9.06040215e-05, 4.36562107e-03, 3.75332032e-04, 8.07292812e-03, 7.16088688e-03, 5.70120598e-02, 1.38962943e-01, 2.94621749e-05, 1.35598441e-02, 1.41647158e-01, 6.27631158e-04, 9.92955070e-02, 2.64243718e-01, 3.81844325e-05, 8.11264326e-03, 6.43130089e-03, 6.98782620e-02, 6.75916271e-01, 3.03820257e-03, 2.53134815e-02, 4.05795076e-04, 2.73526711e-03, 7.15656179e-03, 3.93301318e-03, 8.47962999e-03, 9.11704641e-03, 3.76861151e-03, 2.86387230e-02, 7.67921391e-04, 1.40509584e-05, 8.22198632e-05, 6.86657313e-04, 6.27394417e-04, 7.75363518e-02, 4.36658771e-02, 4.40465577e-05, 8.64153503e-01, 3.66219994e-03, 4.90688379e-01, 1.47133342e-06, 9.15884730e-01, 8.03151257e-01, 2.72952735e-04, 8.62873791e-01, 4.66240987e-01, 1.37800685e-01, 2.76046338e-02, 5.17748520e-05, 7.76625521e-01, 4.68065906e-05, 9.68181319e-01, 5.29872906e-01, 9.37233246e-06, 3.36220841e-01, 9.46869635e-03, 2.58966842e-02, 3.50791117e-04, 1.61810813e-04, 1.76400195e-03, 2.62800725e-02, 2.11107511e-05, 9.82624127e-01, 4.69743099e-05, 1.61595559e-02, 2.61797210e-03, 1.69783526e-03, 2.29976982e-03, 3.03661038e-06, 2.16484761e-03, 3.47404465e-01, 2.31679744e-05, 1.96119298e-05, 8.35489271e-04, 1.48791251e-01, 1.09800396e-01, 2.98768408e-03, 6.33896335e-04, 5.44085719e-01, 1.92567528e-04, 2.89999734e-04, 1.32798168e-03, 3.67818849e-03, 5.46202813e-04, 4.58139028e-02, 2.34494712e-05, 7.32645210e-04, 9.22603554e-03, 3.56945318e-03, 9.14499194e-01, 6.11743853e-01, 2.16490932e-03, 4.04940275e-01, 7.87636910e-01, 2.01103242e-05, 1.16260502e-01, 8.84526168e-04, 4.86459264e-01, 1.95966988e-02, 4.67303601e-02, 4.02650610e-03, 3.47621310e-01, 1.19151772e-03, 2.06734416e-02, 4.83076367e-03, 8.59315443e-02, 6.36561078e-04, 4.07008983e-04, 1.91130051e-05, 4.99172167e-06, 1.51165397e-01, 5.18158283e-04, 7.11191142e-01, 8.43041176e-01, 8.69915719e-01, 3.41162212e-02, 1.13014300e-02, 4.49742864e-03, 3.55004605e-01, 6.90766726e-05, 8.14780327e-01, 7.46635819e-03, 2.19315957e-06, 6.66831664e-03, 6.67243390e-05, 1.17327535e-02, 9.73672055e-01, 3.85559635e-03, 6.74108881e-02, 2.60569149e-05, 8.37477122e-01, 2.53922317e-02, 8.79001714e-01, 2.50387153e-02, 6.60777698e-04, 7.51725954e-02, 4.36213589e-01, 8.01775140e-02, 6.31937157e-04, 1.81153601e-04, 3.86429988e-02, 9.11181026e-05, 6.27681061e-01, 3.06076977e-04, 2.16536001e-02, 2.15819434e-04, 8.61647575e-05, 1.07417088e-02, 6.63447004e-03, 9.77263914e-05, 1.18372035e-05, 2.94516678e-01, 4.53898512e-04, 3.03289704e-01, 3.49323466e-04, 7.31062866e-06, 1.41678191e-03, 8.08478934e-01, 3.99680951e-03, 1.09825865e-02, 4.54898874e-03, 3.88981293e-01, 2.01558169e-02, 7.11152120e-04, 2.37623715e-02, 1.33071004e-04, 2.96827362e-03, 3.05482516e-04, 7.73693976e-05, 5.43784037e-03, 1.05292392e-02, 5.32203822e-01, 1.47079317e-03, 3.04840478e-01, 7.75743842e-01, 9.78734167e-01, 9.75242962e-01, 2.15318635e-06, 3.82905222e-04, 7.86425505e-04, 2.10207976e-02, 4.46272838e-02, 5.02386788e-01, 5.85836905e-04, 2.24775727e-02, 2.28085907e-01, 9.23511211e-03, 3.49441452e-02, 6.67420140e-05, 4.48017052e-04, 5.65682007e-05, 1.57996595e-05, 1.65918886e-02, 4.78473405e-04, 7.44384349e-05, 1.00606932e-01, 2.88409813e-02, 1.77417462e-04, 2.39153497e-02, 1.32729960e-02, 3.01129138e-04, 1.84371633e-04, 6.74284059e-01, 8.10933177e-03, 8.74829353e-01, 7.44684169e-03, 1.16705120e-01, 9.60604392e-01, 1.29644905e-05, 6.86570464e-02, 6.18931205e-04, 8.91699888e-04, 1.17938691e-02, 8.25194487e-05, 2.97461403e-03, 6.45381558e-01, 4.39613101e-03, 4.48809994e-05, 4.14183366e-05, 2.57164216e-03, 1.73140561e-02, 1.08058702e-01, 3.18403174e-01, 5.95342556e-03, 1.06769111e-01, 7.61743500e-02, 1.02940494e-02, 1.36904215e-04, 2.50499805e-03, 1.09371232e-02, 4.11234540e-03, 2.27919321e-01, 1.08180140e-03, 3.01383747e-04, 1.06165700e-01, 3.02493466e-06, 3.82793863e-01, 3.97042311e-01, 5.65975549e-04, 1.93854303e-02, 2.43862615e-02, 2.42070692e-03, 1.30253370e-03, 9.09819473e-02, 7.10586578e-01, 2.91078914e-03, 8.47914954e-02, 9.77727164e-02, 9.98487101e-03, 5.54693563e-04, 1.33499755e-01, 4.78575600e-06, 2.49425786e-01, 1.47417893e-06, 3.57342163e-03, 1.13583494e-02, 1.55382764e-05, 5.23407382e-01, 7.70354532e-02, 9.57659753e-03, 8.31480419e-02, 1.62529423e-03, 1.22214306e-03, 2.27271674e-03, 6.42475717e-03, 7.19504134e-01, 8.32626962e-05, 1.11315158e-02, 1.73448333e-01, 2.72773724e-05, 4.37359854e-02, 8.71274920e-02, 1.22089984e-02, 5.63494730e-01, 9.55509722e-01, 4.44984066e-01, 2.69180125e-04, 2.39614647e-04, 2.51153084e-02, 9.64049125e-01, 1.07040618e-02, 1.23096988e-05, 8.74597313e-06, 2.43801601e-02, 4.15508608e-02, 2.41889449e-03, 9.23312139e-03, 6.04404189e-01, 7.09007671e-04, 4.36469135e-04, 1.27093225e-02, 1.38740894e-05, 5.14733835e-04, 8.26857894e-02, 7.47208640e-01, 2.27104734e-03, 1.08361233e-02, 3.20837753e-01, 8.06453738e-03, 2.69136802e-04, 8.13843460e-04, 6.75968679e-05, 1.12223042e-03, 1.88977996e-01, 2.07527137e-01, 1.59962863e-04, 3.17931187e-02, 1.04524164e-02, 5.69151473e-03, 1.73906483e-01, 1.92781115e-04, 2.22283366e-03, 3.32556337e-01, 7.33776095e-01, 1.06567368e-02, 6.10572538e-03, 1.63290849e-01, 2.47882056e-02, 1.48893167e-02, 8.70141691e-03, 2.08414189e-03, 7.03505893e-02, 4.11325597e-05, 9.72664753e-01, 3.84169589e-02, 1.68355460e-03, 6.18415196e-01, 1.49485102e-03, 3.43764933e-05, 2.24646185e-03, 9.53742368e-01, 1.47597325e-01, 8.35354402e-01, 2.15877235e-03, 7.36736006e-03, 3.72396456e-02, 5.85596456e-01, 6.28999632e-01, 2.11982839e-05, 9.27494445e-04, 7.32834319e-01, 3.03035827e-01, 6.85055585e-03, 9.20975901e-01]) . employed=[np.random.binomial(1,p[i],size=1).tolist()[0] for i in range(1000)] . df = pd.DataFrame({&#39;toeic&#39;:toeic,&#39;gpa&#39;:gpa,&#39;employed&#39;:employed}) df . toeic gpa employed . 0 845 | 3.577619 | 0 | . 1 705 | 4.359228 | 0 | . 2 940 | 2.958117 | 0 | . 3 610 | 3.425006 | 0 | . 4 595 | 2.137851 | 0 | . ... ... | ... | ... | . 995 600 | 3.590461 | 0 | . 996 855 | 4.235202 | 1 | . 997 945 | 3.413732 | 0 | . 998 665 | 3.747738 | 0 | . 999 985 | 3.972754 | 1 | . 1000 rows × 3 columns . df.toeic.min() . 550 . import plotly.express as px . px.scatter(df,x=&#39;gpa&#39;,y=&#39;toeic&#39;,color=&#39;employed&#39;) . &#54869;&#47456;&#48320;&#49688; . random sample: $X_1,X_2, dots,X_n overset{iid}{ sim} N(0,1)$ 라는 표현에서 $X_1, dots, X_n$ 을 .",
            "url": "https://guebin.github.io/DL2022/2022/09/25/draft.html",
            "relUrl": "/2022/09/25/draft.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "(4주차) 9월22일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . 강의영상이 제대로 안찍혔어요 죄송합니다. (12분쯤부터인가? 화면이 녹화되지 않고 목소리만 녹화되었어요) | 오늘 9월22일 수업분은 9월28일에 재촬영하여 업로드하도록하겠습니다. | . review . import torch import pandas as pd import numpy as np import matplotlib.pyplot as plt . df = pd.read_csv(&quot;https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-22-regression.csv&quot;) df . x y . 0 -2.482113 | -8.542024 | . 1 -2.362146 | -6.576713 | . 2 -1.997295 | -5.949576 | . 3 -1.623936 | -4.479364 | . 4 -1.479192 | -4.251570 | . ... ... | ... | . 95 2.244400 | 10.325987 | . 96 2.393501 | 12.266493 | . 97 2.605604 | 13.098280 | . 98 2.605658 | 12.546793 | . 99 2.663240 | 13.834002 | . 100 rows × 2 columns . x= torch.tensor(df.x,dtype=torch.float32).reshape(100,1) y= torch.tensor(df.y,dtype=torch.float32).reshape(100,1) X= torch.tensor([[1]*100,x]).T . What = torch.tensor([[-5.0],[10.0]],requires_grad=True) What . tensor([[-5.], [10.]], requires_grad=True) . plt.plot(x,y,&#39;o&#39;) #plt.plot(x,-5+10*x,&#39;--&#39;) plt.plot(x,X@What.data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f87149ab350&gt;] . ver1: loss = sum of squares error . alpha = 1/1000 What = torch.tensor([[-5.0],[10.0]],requires_grad=True) for epoc in range(30): # step1: yhat yhat = X@What # step2: loss loss = torch.sum((y-yhat)**2) # step3: 미분 loss.backward() # step4: update What.data = What.data - alpha * What.grad What.grad = None # . What . tensor([[2.4290], [4.0144]], requires_grad=True) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,X@What.data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f870d91de10&gt;] . note: 왜 What = What - alpha*What.grad 는 안되는지? | . ver2: loss = mean squared error = MSE . alpha = 1/10 What = torch.tensor([[-5.0],[10.0]],requires_grad=True) for epoc in range(30): # step1: yhat yhat = X@What # step2: loss loss = torch.mean((y-yhat)**2) # step3: 미분 loss.backward() # step4: update What.data = What.data - alpha * What.grad What.grad = None # . What . tensor([[2.4290], [4.0144]], requires_grad=True) . step1&#51032; &#45796;&#47480;&#48260;&#51204;: torch.nn.Linear() . ver1: bias=True . torch.manual_seed(43052) net = torch.nn.Linear(in_features=1, out_features=1, bias=True) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(x).data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f870cf50ad0&gt;] . - net에서 $ hat{w}_0, hat{w}_1$ 의 값은? . net.weight # w1 . Parameter containing: tensor([[-0.3467]], requires_grad=True) . net.bias # w0 . Parameter containing: tensor([-0.8470], requires_grad=True) . _yhat = -0.8470 + -0.3467*x . plt.plot(x,y,&#39;o&#39;) plt.plot(x, _yhat,&#39;--&#39;) plt.plot(x,net(x).data,&#39;-.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f870d437690&gt;] . - 수식표현: $ hat{y}_i = hat{w}_0 + hat{w}_1 x_i = hat{b} + hat{w}x_i = -0.8470 + -0.3467 x_i$ for all $i=1,2, dots,100$. . ver2 . - 입력이 x가 아닌 X를 넣고 싶다면? (보통 잘 안하긴 해요, 왜? bias=False로 주는게 귀찮거든요) . X는 바이어스가 고려된 상황 | . net(X) ## 그대로 쓰면 당연히 에러 . RuntimeError Traceback (most recent call last) &lt;ipython-input-104-e0ceb3d07db4&gt; in &lt;module&gt; -&gt; 1 net(X) ## 그대로 쓰면 당연히 에러 ~/anaconda3/envs/py37/lib/python3.7/site-packages/torch/nn/modules/module.py in _call_impl(self, *input, **kwargs) 1128 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks 1129 or _global_forward_hooks or _global_forward_pre_hooks): -&gt; 1130 return forward_call(*input, **kwargs) 1131 # Do not call functions when jit is used 1132 full_backward_hooks, non_full_backward_hooks = [], [] ~/anaconda3/envs/py37/lib/python3.7/site-packages/torch/nn/modules/linear.py in forward(self, input) 112 113 def forward(self, input: Tensor) -&gt; Tensor: --&gt; 114 return F.linear(input, self.weight, self.bias) 115 116 def extra_repr(self) -&gt; str: RuntimeError: mat1 and mat2 shapes cannot be multiplied (100x2 and 1x1) . torch.manual_seed(43052) net = torch.nn.Linear(in_features=2, out_features=1, bias=False) . net.weight . Parameter containing: tensor([[-0.2451, -0.5989]], requires_grad=True) . net.bias . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(X).data, &#39;--&#39;) plt.plot(x,X@torch.tensor([[-0.2451],[-0.5989]]), &#39;-.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f870cd2c5d0&gt;] . - 수식표현: $ hat{ bf y} = { bf X} { bf hat W} = begin{bmatrix} 1 &amp; x_1 1 &amp; x_2 dots &amp; dots 1 &amp; x_{100} end{bmatrix} begin{bmatrix} -0.2451 -0.5989 end{bmatrix}$ . &#51096;&#47803;&#46108;&#49324;&#50857;1 . _x = x.reshape(-1) . _x . tensor([-2.4821, -2.3621, -1.9973, -1.6239, -1.4792, -1.4635, -1.4509, -1.4435, -1.3722, -1.3079, -1.1904, -1.1092, -1.1054, -1.0875, -0.9469, -0.9319, -0.8643, -0.7858, -0.7549, -0.7421, -0.6948, -0.6103, -0.5830, -0.5621, -0.5506, -0.5058, -0.4806, -0.4738, -0.4710, -0.4676, -0.3874, -0.3719, -0.3688, -0.3159, -0.2775, -0.2772, -0.2734, -0.2721, -0.2668, -0.2155, -0.2000, -0.1816, -0.1708, -0.1565, -0.1448, -0.1361, -0.1057, -0.0603, -0.0559, -0.0214, 0.0655, 0.0684, 0.1195, 0.1420, 0.1521, 0.1568, 0.2646, 0.2656, 0.3157, 0.3220, 0.3461, 0.3984, 0.4190, 0.5443, 0.5579, 0.5913, 0.6148, 0.6469, 0.6469, 0.6523, 0.6674, 0.7059, 0.7141, 0.7822, 0.8154, 0.8668, 0.9291, 0.9804, 0.9853, 0.9941, 1.0376, 1.0393, 1.0697, 1.1024, 1.1126, 1.1532, 1.2289, 1.3403, 1.3494, 1.4279, 1.4994, 1.5031, 1.5437, 1.6789, 2.0832, 2.2444, 2.3935, 2.6056, 2.6057, 2.6632]) . torch.manual_seed(43052) net = torch.nn.Linear(in_features=1,out_features=1) . net(_x) . RuntimeError Traceback (most recent call last) &lt;ipython-input-126-6f02cc22c6a4&gt; in &lt;module&gt; -&gt; 1 net(_x) ~/anaconda3/envs/py37/lib/python3.7/site-packages/torch/nn/modules/module.py in _call_impl(self, *input, **kwargs) 1128 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks 1129 or _global_forward_hooks or _global_forward_pre_hooks): -&gt; 1130 return forward_call(*input, **kwargs) 1131 # Do not call functions when jit is used 1132 full_backward_hooks, non_full_backward_hooks = [], [] ~/anaconda3/envs/py37/lib/python3.7/site-packages/torch/nn/modules/linear.py in forward(self, input) 112 113 def forward(self, input: Tensor) -&gt; Tensor: --&gt; 114 return F.linear(input, self.weight, self.bias) 115 116 def extra_repr(self) -&gt; str: RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x100 and 1x1) . &#51096;&#47803;&#46108;&#49324;&#50857;2 . torch.manual_seed(43052) net = torch.nn.Linear(in_features=2,out_features=1) # bias=False를 깜빡.. . net.weight . Parameter containing: tensor([[-0.2451, -0.5989]], requires_grad=True) . net.bias . Parameter containing: tensor([0.2549], requires_grad=True) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,net(X).data,&#39;--&#39;) plt.plot(x,X@torch.tensor([[-0.2451],[-0.5989]])+0.2549,&#39;-.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f870d1afa90&gt;] . 수식표현: $ hat{ bf y} = { bf X} { bf hat W} + hat{b}= begin{bmatrix} 1 &amp; x_1 1 &amp; x_2 dots &amp; dots 1 &amp; x_{100} end{bmatrix} begin{bmatrix} -0.2451 -0.5989 end{bmatrix} + 0.2549$ | . &#49689;&#51228; . (1) 자신의 학번을 seed로 설정하고 표준정규분포에서 5개의 난수를 생성하고 순서대로 정렬한 뒤 이를 x로 저장하라. (아래코드참고) . torch.manual_seed(202043052) x,_ = torch.randn(5).sort() . (2) 아래와 같이 torch.nn.Linear()를 이용하여 적당한 네트워크를 생성하고 아래와 같이 $ hat{y}_i$ 가 구해지도록 하라. . $$ hat{y}_i = 2.5 x_i - 7, quad i=1,2,3,4,5 $$ . 단, $x_1,x_2, dots,x_5$는 x의 원소이다. . . Note: 공부를 위해서 bias를 넣은 버전과 넣지 않는 버전 모두 계산해 보세요. (숙제제출은 한 방법으로만 구현해도 무방) .",
            "url": "https://guebin.github.io/DL2022/2022/09/22/(4%EC%A3%BC%EC%B0%A8)-9%EC%9B%9422%EC%9D%BC.html",
            "relUrl": "/2022/09/22/(4%EC%A3%BC%EC%B0%A8)-9%EC%9B%9422%EC%9D%BC.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "(3주차) 9월20일",
            "content": "- 강의노트가 약간 수정되었습니다 (loss.backward()의 계산결과 검증에서 편미분의 간단한 구현을 통한 검증이 추가되었습니다) . &#44053;&#51032;&#50689;&#49345; . . imports . import torch import numpy as np import matplotlib.pyplot as plt . &#47196;&#46300;&#47605; . - 회귀분석 $ to$ 로지스틱 $ to$ 심층신경망(DNN) $ to$ 합성곱신경망(CNN) . - 강의계획서 . ref . - 넘파이 문법이 약하다면? (reshape, concatenate, stack) . (1) reshape: 아래 링크의 넘파이공부 2단계 reshape 참고 . https://guebin.github.io/IP2022/2022/04/06/(6%EC%A3%BC%EC%B0%A8)-4%EC%9B%946%EC%9D%BC.html . (2) concatenate, stack: 아래 링크의 넘파이공부 4단계 참고 . https://guebin.github.io/IP2022/2022/04/11/(6%EC%A3%BC%EC%B0%A8)-4%EC%9B%9411%EC%9D%BC.html . &#54924;&#44480;&#47784;&#54805; &#49548;&#44060; . - model: $y_i= w_0+w_1 x_i + epsilon_i = 2.5 + 4x_i + epsilon_i, quad i=1,2, dots,n$ . - model: ${ bf y}={ bf X}{ bf W} + boldsymbol{ epsilon}$ . ${ bf y}= begin{bmatrix} y_1 y_2 dots y_n end{bmatrix}, quad { bf X}= begin{bmatrix} 1 &amp; x_1 1 &amp; x_2 dots 1 &amp; x_n end{bmatrix}, quad { bf W}= begin{bmatrix} 2.5 4 end{bmatrix}, quad boldsymbol{ epsilon}= begin{bmatrix} epsilon_1 dots epsilon_n end{bmatrix}$ | . &#54924;&#44480;&#47784;&#54805;&#50640;&#49436; &#45936;&#51060;&#53552; &#49373;&#49457; . torch.manual_seed(43052) ones= torch.ones(100) x,_ = torch.randn(100).sort() X = torch.stack([ones,x]).T # torch.stack([ones,x],axis=1) W = torch.tensor([2.5,4]) ϵ = torch.randn(100)*0.5 y = X@W + ϵ . plt.plot(x,y,&#39;o&#39;) plt.plot(x,2.5+4*x,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa91687450&gt;] . &#54924;&#44480;&#47784;&#54805;&#50640;&#49436; &#54617;&#49845;&#51060;&#46976;? . - 파란점만 주어졌을때, 주황색 점선을 추정하는것. 좀 더 정확하게 말하면 given data로 $ begin{bmatrix} hat{w}_0 hat{w}_1 end{bmatrix}$를 최대한 $ begin{bmatrix} 2.5 4 end{bmatrix}$와 비슷하게 찾는것. . given data : $ big {(x_i,y_i) big }_{i=1}^{n}$ . | parameter: ${ bf W}= begin{bmatrix} w_0 w_1 end{bmatrix}$ . | estimated parameter: ${ bf hat{W}}= begin{bmatrix} hat{w}_0 hat{w}_1 end{bmatrix}$ . | . - 더 쉽게 말하면 아래의 그림을 보고 적당한 추세선을 찾는것이다. . plt.plot(x,y,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa91330d50&gt;] . - 시도: $( hat{w}_0, hat{w}_1)=(-5,10)$을 선택하여 선을 그려보고 적당한지 판단. . plt.plot(x,y,&#39;o&#39;) plt.plot(x,-5+10*x,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa912bb0d0&gt;] . $ hat{y}_i=-5 +10 x_i$ 와 같이 $y_i$의 값을 적합시키겠다는 의미 | . - 벡터표현으로 주황색점선을 계산 . What = torch.tensor([-5.0,10.0]) . X.shape . torch.Size([100, 2]) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,X@What,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa911c1510&gt;] . &#54028;&#46972;&#47700;&#53552;&#47484; &#54617;&#49845;&#54616;&#45716; &#48169;&#48277; (&#51201;&#45817;&#54620; &#49440;&#51004;&#47196; &#50629;&#45936;&#51060;&#53944; &#54616;&#45716; &#48169;&#48277;) . - 이론적으로 추론 &lt;- 회귀분석시간에 배운것 . - 컴퓨터의 반복계산을 이용하여 추론 (손실함수도입 + 경사하강법) &lt;- 우리가 오늘 파이토치로 실습해볼 내용. . - 전략: 아래와 같은 3단계 전략을 취한다. . stage1: 아무 점선이나 그어본다.. | stage2: stage1에서 그은 점선보다 더 좋은 점선으로 바꾼다. | stage3: stage1 - 2 를 반복한다. | . Stage1: &#52395;&#48264;&#51704; &#51216;&#49440; -- &#51076;&#51032;&#51032; &#49440;&#51012; &#51068;&#45800; &#44536;&#50612;&#48372;&#51088; . - $ hat{w}_0=-5, hat{w}_1 = 10$ 으로 설정하고 (왜? 그냥) 임의의 선을 그어보자. . What = torch.tensor([-5.0,10.0],requires_grad=True) What . tensor([-5., 10.], requires_grad=True) . 처음에는 ${ bf hat{W}}= begin{bmatrix} hat{w}_0 hat{w}_1 end{bmatrix}= begin{bmatrix} -5 10 end{bmatrix} $ 를 대입해서 주황색 점선을 적당히 그려보자는 의미 . | 끝에 requires_grad=True는 나중에 미분을 위한 것 . | . yhat = X@What . plt.plot(x,y,&#39;o&#39;) plt.plot(x,yhat.data,&#39;--&#39;) # 그림을 그리기 위해서 yhat의 미분꼬리표를 제거 . [&lt;matplotlib.lines.Line2D at 0x7ffa911402d0&gt;] . Stage2: &#52395;&#48264;&#51704; &#49688;&#51221; -- &#52572;&#52488;&#51032; &#51216;&#49440;&#50640; &#45824;&#54620; &#39;&#51201;&#45817;&#54620; &#51221;&#46020;&#39;&#47484; &#54032;&#45800;&#54616;&#44256; &#45908; &#39;&#51201;&#45817;&#54620;&#39; &#51216;&#49440;&#51004;&#47196; &#50629;&#45936;&#51060;&#53944; &#54620;&#45796;. . - &#39;적당한 정도&#39;를 판단하기 위한 장치: loss function 도입! . $loss= sum_{i=1}^{n}(y_i- hat{y}_i)^2= sum_{i=1}^{n}(y_i-( hat{w}_0+ hat{w}_1x_i))^2$ . $=({ bf y}-{ bf hat{y}})^ top({ bf y}-{ bf hat{y}})=({ bf y}-{ bf X}{ bf hat{W}})^ top({ bf y}-{ bf X}{ bf hat{W}})$ . - loss 함수의 특징 . $y_i approx hat{y}_i$ 일수록 loss값이 작다. | $y_i approx hat{y}_i$ 이 되도록 $( hat{w}_0, hat{w}_1)$을 잘 찍으면 loss값이 작다. | (중요) 주황색 점선이 &#39;적당할 수록&#39; loss값이 작다. | . loss = torch.sum((y-yhat)**2) loss . tensor(8587.6875, grad_fn=&lt;SumBackward0&gt;) . - 우리의 목표: 이 loss(=8587.6875)을 더 줄이자. . 궁극적으로는 아예 모든 조합 $( hat{w}_0, hat{w}_1)$에 대하여 가장 작은 loss를 찾으면 좋겠다. (stage2에서 할일은 아님) | . - 문제의 치환: 생각해보니까 우리의 문제는 아래와 같이 수학적으로 단순화 되었다. . 적당해보이는 주황색 선을 찾자 $ to$ $loss(w_0,w_1)$를 최소로하는 $(w_0,w_1)$의 값을 찾자. | . - 수정된 목표: $loss(w_0,w_1)$를 최소로 하는 $(w_0,w_1)$을 구하라. . 단순한 수학문제가 되었다. 마치 $loss(w)=w^2-2w+3$ 을 최소화하는 $w$를 찾으라는 것과 같음. | 즉 &quot;적당한 선으로 업데이트 하라 = 파라메터를 학습 하라 = 손실함수를 최소화 하라&quot; | . - 우리의 무기: 경사하강법, 벡터미분 . . Stage2&#47484; &#50948;&#54620; &#44221;&#49324;&#54616;&#44053;&#48277; &#48373;&#49845; . 경사하강법 아이디어 (1차원) . (step 1) 임의의 점을 찍는다. . (step 2) 그 점에서 순간기울기를 구한다. (접선) &lt;-- 미분 . (step 3) 순간기울기(=미분계수)의 부호를 살펴보고 부호와 반대방향으로 움직인다. . (팁) 기울기의 절대값 크기와 비례하여 보폭(=움직이는 정도)을 조절한다. . 경사하강법 아이디어 (2차원) . (step 1) 임의의 점을 찍는다. . (step 2) 그 점에서 순간기울기를 구한다. (접평면) &lt;-- 편미분 . (step 3) 순간기울기(=미분계수)의 부호를 살펴보고 부호와 반대방향으로 각각 움직인다. . (팁) 기울기의 절대값 크기와 비례하여 보폭(=움직이는 정도)을 각각 조절한다. . loss를 줄이도록 ${ bf W}$를 개선하는 방법 . - $수정값 leftarrow 원래값 - 기울어진크기(=미분계수) times alpha $ . 여기에서 $ alpha$는 전체적인 보폭의 크기를 결정한다. 즉 $ alpha$값이 클수록 한번의 update에 움직이는 양이 크다. | . - ${ bf W} leftarrow { bf W} - alpha times frac{ partial}{ partial { bf W}}loss(w_0,w_1)$ . 마이너스의 의미: 기울기의 부호를 보고 반대방향으로 움직여라. . | $ frac{ partial}{ partial { bf W}}loss(w_0,w_1):$ 기울기의 절대값 크기와 비례하여 움직이는 정도를 조정하라. . | $ alpha$의 의미: 전체적인 보폭의 속도를 조절, $ alpha$가 크면 전체적으로 빠르게 움직인다. 다리의 길이로 비유할 수 있다. . | . . - 우리의 목표: loss=8587.6875 인데, 이걸 줄이는 것이 목표라고 했었음. 이것을 줄이는 방법이 경사하강법이다. . - 경사하강법으로 loss를 줄이기 위해서는 $ frac{ partial}{ partial { bf W}}loss(w_0,w_1)$의 계산이 필요한데, 이를 위해서 벡터미분이 필요하다. (loss.backward()로 하면된다) . loss . tensor(8587.6875, grad_fn=&lt;SumBackward0&gt;) . loss.backward() . loss.backward()의 의미: loss를 미분해라! 뭘로? requires_grad=True를 가진 텐서로!! . | loss=torch.sum((y-yhat)**2)= torch.sum((y-X@What)**2) # 이었고 What=torch.tensor([-5.0,10.0],requires_grad=True) # 이므로 결국 What으로 미분하라는 의미. # 미분한 식이 나오는 것이 아니고, # 그 식에 (-5.0, 10.0)을 대입한 계수값이 계산됨. . | . - 위에서 loss.backward()의 과정은 미분을 활용하여 $(-5,10)$에서의 순간기울기를 구했다는 의미임. . - (-5,10)에서 loss의 순간기울기 값은 What.grad로 확인가능하다. . What,What.grad . (tensor([-5., 10.], requires_grad=True), tensor([-1342.2522, 1188.9305])) . 이것이 의미하는건 $(-5,10)$에서의 $loss(w_0,w_1)$의 순간기울기가 $(-1342.2523, 1188.9307)$ 이라는 의미 | . - (확인1) loss.backward()가 미분을 잘 계산해 주는 것이 맞는가? 손계산으로 검증하여 보자. . $loss(w_0,w_1)=({ bf y}- hat{ bf y})^ top ({ bf y}- hat{ bf y})=({ bf y}-{ bf XW})^ top ({ bf y}-{ bf XW})$ . | $ frac{ partial}{ partial { bf W} }loss(w_0,w_1)=-2{ bf X}^ top { bf y}+2{ bf X}^ top { bf X W}$ . | . - 2 * X.T @ y + 2 * X.T @ X @ What . tensor([-1342.2522, 1188.9308], grad_fn=&lt;AddBackward0&gt;) . - (확인2) loss.backward()가 미분을 잘 계산해 주는 것이 맞는가? 편미분을 간단히 구현하여 검증하여 보자. . $ frac{ partial}{ partial { bf W} } loss(w_0,w_1)= begin{bmatrix} frac{ partial}{ partial w_0} frac{ partial}{ partial w_1} end{bmatrix}loss(w_0,w_1) = begin{bmatrix} frac{ partial}{ partial w_0}loss(w_0,w_1) frac{ partial}{ partial w_1}loss(w_0,w_1) end{bmatrix}$ . | $ frac{ partial}{ partial w_0}loss(w_0,w_1) approx frac{loss(w_0+h,w_1)-loss(w_0,w_1)}{h}$ . | $ frac{ partial}{ partial w_1}loss(w_0,w_1) approx frac{loss(w_0,w_1+h)-loss(w_0,w_1)}{h}$ . | . _lossfn = lambda w0,w1: torch.sum((y-w0-w1*x)**2) _lossfn(-5,10) . tensor(8587.6875) . h=0.001 (_lossfn(-5+h,10) - _lossfn(-5,10))/h, (_lossfn(-5,10+h) - _lossfn(-5,10))/h . (tensor(-1341.7968), tensor(1190.4297)) . 약간 오차가 있지만 얼추비슷 $ to$ 잘 계산했다는 소리임 | . - 수정전, 수정하는폭, 수정후의 값은 차례로 아래와 같다. . alpha=0.001 print(&#39;수정전: &#39; + str(What.data)) # What 에서 미분꼬리표를 떼고 싶다면? What.data or What.detach() print(&#39;수정하는폭: &#39; +str(-alpha * What.grad)) print(&#39;수정후: &#39; +str(What.data-alpha * What.grad)) print(&#39;*참값: (2.5,4)&#39; ) . 수정전: tensor([-5., 10.]) 수정하는폭: tensor([ 1.3423, -1.1889]) 수정후: tensor([-3.6577, 8.8111]) *참값: (2.5,4) . - Wbefore, Wafter 계산 . Wbefore = What.data Wafter = What.data- alpha * What.grad Wbefore, Wafter . (tensor([-5., 10.]), tensor([-3.6577, 8.8111])) . - Wbefore, Wafter의 시각화 . plt.plot(x,y,&#39;o&#39;) plt.plot(x,X@Wbefore,&#39;--&#39;) plt.plot(x,X@Wafter,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa900ccd50&gt;] . Stage3: Learn (=estimate $ bf hat{W})$ . - 이 과정은 Stage1,2를 반복하면 된다. . What= torch.tensor([-5.0,10.0],requires_grad=True) # . alpha=0.001 for epoc in range(30): ## 30번 반복합니다!! yhat=X@What loss=torch.sum((y-yhat)**2) loss.backward() What.data = What.data-alpha * What.grad What.grad=None . 원래 철자는 epoch이 맞아요 | . - 반복결과는?! (최종적으로 구해지는 What의 값은?!) . 참고로 true | . What.data ## true인 (2.5,4)와 상당히 비슷함 . tensor([2.4290, 4.0144]) . - 반복결과를 시각화하면? . plt.plot(x,y,&#39;o&#39;) plt.plot(x,X@What.data,&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa9005f090&gt;] . &#54028;&#46972;&#47700;&#53552;&#51032; &#54617;&#49845;&#44284;&#51221; &#51020;&#48120; (&#54617;&#49845;&#44284;&#51221; &#47784;&#45768;&#53552;&#47553;) . &#54617;&#49845;&#44284;&#51221;&#51032; &#44592;&#47197; . - 기록을 해보자. . loss_history = [] # 기록하고 싶은것 1 yhat_history = [] # 기록하고 싶은것 2 What_history = [] # 기록하고 싶은것 3 . What= torch.tensor([-5.0,10.0],requires_grad=True) alpha=0.001 for epoc in range(30): yhat=X@What ; yhat_history.append(yhat.data.tolist()) loss=torch.sum((y-yhat)**2); loss_history.append(loss.item()) loss.backward() What.data = What.data-alpha * What.grad; What_history.append(What.data.tolist()) What.grad=None . - $ hat{y}$ 관찰 (epoch=3, epoch=10, epoch=15) . plt.plot(x,y,&#39;o&#39;) plt.plot(x,yhat_history[2],&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa78fac350&gt;] . plt.plot(x,y,&#39;o&#39;) plt.plot(x,yhat_history[9],&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa78eba0d0&gt;] . plt.plot(x,y,&#39;o&#39;) plt.plot(x,yhat_history[14],&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ffa78eafa10&gt;] . - $ hat{ bf W}$ 관찰 . What_history . [[-3.657747745513916, 8.81106948852539], [-2.554811716079712, 7.861191749572754], [-1.649186372756958, 7.101552963256836], [-0.9060714244842529, 6.49347448348999], [-0.29667872190475464, 6.006272315979004], [0.2027742564678192, 5.615575313568115], [0.6119104623794556, 5.302003860473633], [0.9469034075737, 5.0501298904418945], [1.2210698127746582, 4.847658157348633], [1.4453644752502441, 4.684779644012451], [1.6287914514541626, 4.553659915924072], [1.7787461280822754, 4.448036193847656], [1.9012980461120605, 4.3628973960876465], [2.0014259815216064, 4.294229507446289], [2.0832109451293945, 4.238814353942871], [2.149996757507324, 4.194070339202881], [2.204521894454956, 4.157923698425293], [2.249027729034424, 4.128708839416504], [2.285348415374756, 4.105085849761963], [2.31498384475708, 4.0859761238098145], [2.339160442352295, 4.070511341094971], [2.3588807582855225, 4.057991027832031], [2.3749637603759766, 4.0478515625], [2.3880786895751953, 4.039637088775635], [2.3987717628479004, 4.032979965209961], [2.40748929977417, 4.027583599090576], [2.414595603942871, 4.023208141326904], [2.4203879833221436, 4.019659042358398], [2.4251089096069336, 4.016779899597168], [2.4289560317993164, 4.014443874359131]] . - loss 관찰 . plt.plot(loss_history) . [&lt;matplotlib.lines.Line2D at 0x7ffa78e2d350&gt;] . &#54617;&#49845;&#44284;&#51221;&#51012; animation&#51004;&#47196; &#49884;&#44033;&#54868; . from matplotlib import animation . plt.rcParams[&#39;figure.figsize&#39;] = (7.5,2.5) plt.rcParams[&quot;animation.html&quot;] = &quot;jshtml&quot; . - 왼쪽에는 $(x_i,y_i)$ and $(x_i, hat{y}_i)$ 을 그리고 오른쪽에는 $loss(w_0,w_1)$ 을 그릴것임 . fig = plt.figure() ax1 = fig.add_subplot(1, 2, 1) ax2 = fig.add_subplot(1, 2, 2, projection=&#39;3d&#39;) . - 왼쪽그림! . ax1.plot(x,y,&#39;o&#39;) line, = ax1.plot(x,yhat_history[0]) # 나중에 애니메이션 할때 필요해요.. . fig . - 오른쪽 그림1: $loss(w_0,w_1)$ . _w0 = np.arange(-6, 11, 0.5) ## 파란색곡면을 그리는 코드 (시작) _w1 = np.arange(-6, 11, 0.5) w1,w0 = np.meshgrid(_w1,_w0) lss=w0*0 for i in range(len(_w0)): for j in range(len(_w1)): lss[i,j]=torch.sum((y-_w0[i]-_w1[j]*x)**2) ax2.plot_surface(w0, w1, lss, rstride=1, cstride=1, color=&#39;b&#39;,alpha=0.35) ## 파란색곡면을 그리는 코드(끝) ax2.azim = 40 ## 3d plot의 view 조절 ax2.dist = 8 ## 3d plot의 view 조절 ax2.elev = 5 ## 3d plot의 view 조절 . fig . - 오른쪽 그림2: $(w_0,w_1)=(2.5,4)$ 와 $loss(2.5,4)$ 값 &lt;- loss 함수가 최소가 되는 값 (이거 진짜야? ㅋㅋ) . ax2.scatter(2.5,4,torch.sum((y-2.5-4*x)**2),s=200,color=&#39;red&#39;,marker=&#39;*&#39;) ## 최소점을 표시하는 코드 (붉은색 별) . &lt;mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7ffa9199ce90&gt; . fig . - 오른쪽 그림3: $(w_0,w_1)=(-3.66, 8.81)$ 와 $loss(-3.66,8.81)$ 값 . What_history[0] . [-3.657747745513916, 8.81106948852539] . ax2.scatter(What_history[0][0],What_history[0][1],loss_history[0],color=&#39;grey&#39;) ## 업데이트되는 What을 표시하는 점 (파란색 동그라미) . &lt;mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7ffa78c2ba10&gt; . fig . - 애니메이션 . def animate(epoc): line.set_ydata(yhat_history[epoc]) ax2.scatter(What_history[epoc][0],What_history[epoc][1],loss_history[epoc],color=&#39;grey&#39;) return line ani = animation.FuncAnimation(fig, animate, frames=30) plt.close() ani . Once Loop Reflect - 함수로 만들자.. . def show_lrpr(data,history): x,y = data loss_history,yhat_history,What_history = history fig = plt.figure() ax1 = fig.add_subplot(1, 2, 1) ax2 = fig.add_subplot(1, 2, 2, projection=&#39;3d&#39;) ## ax1: 왼쪽그림 ax1.plot(x,y,&#39;o&#39;) line, = ax1.plot(x,yhat_history[0]) ## ax2: 오른쪽그림 _w0 = np.arange(-6, 11, 0.5) ## 파란색곡면을 그리는 코드 (시작) _w1 = np.arange(-6, 11, 0.5) w1,w0 = np.meshgrid(_w1,_w0) lss=w0*0 for i in range(len(_w0)): for j in range(len(_w1)): lss[i,j]=torch.sum((y-_w0[i]-_w1[j]*x)**2) ax2.plot_surface(w0, w1, lss, rstride=1, cstride=1, color=&#39;b&#39;,alpha=0.35) ## 파란색곡면을 그리는 코드(끝) ax2.scatter(2.5,4,torch.sum((y-2.5-4*x)**2),s=200,color=&#39;red&#39;,marker=&#39;*&#39;) ## 최소점을 표시하는 코드 (붉은색 별) ax2.scatter(What_history[0][0],What_history[0][1],loss_history[0],color=&#39;b&#39;) ## 업데이트되는 What을 표시하는 점 (파란색 동그라미) ax2.azim = 40 ## 3d plot의 view 조절 ax2.dist = 8 ## 3d plot의 view 조절 ax2.elev = 5 ## 3d plot의 view 조절 def animate(epoc): line.set_ydata(yhat_history[epoc]) ax2.scatter(np.array(What_history)[epoc,0],np.array(What_history)[epoc,1],loss_history[epoc],color=&#39;grey&#39;) return line ani = animation.FuncAnimation(fig, animate, frames=30) plt.close() return ani . show_lrpr([x,y],[loss_history,yhat_history,What_history]) . Once Loop Reflect $ alpha$&#50640; &#45824;&#54616;&#50668; ($ alpha$&#45716; &#54617;&#49845;&#47456;) . (1) $ alpha=0.0001$: $ alpha$ &#44032; &#45320;&#47924; &#51089;&#45796;&#47732;? $ to$ &#48708;&#54952;&#50984;&#51201;&#51060;&#45796;. . loss_history = [] # 기록하고 싶은것 1 yhat_history = [] # 기록하고 싶은것 2 What_history = [] # 기록하고 싶은것 3 . What= torch.tensor([-5.0,10.0],requires_grad=True) alpha=0.0001 for epoc in range(30): yhat=X@What ; yhat_history.append(yhat.data.tolist()) loss=torch.sum((y-yhat)**2); loss_history.append(loss.item()) loss.backward() What.data = What.data-alpha * What.grad; What_history.append(What.data.tolist()) What.grad=None . show_lrpr([x,y],[loss_history,yhat_history,What_history]) . Once Loop Reflect (2) $ alpha=0.0083$: $ alpha$&#44032; &#45320;&#47924; &#53356;&#45796;&#47732;? $ to$ &#45796;&#47480;&#51032;&#48120;&#50640;&#49436; &#48708;&#54952;&#50984;&#51201;&#51060;&#45796; + &#50948;&#54744;&#54616;&#45796;.. . loss_history = [] # 기록하고 싶은것 1 yhat_history = [] # 기록하고 싶은것 2 What_history = [] # 기록하고 싶은것 3 . What= torch.tensor([-5.0,10.0],requires_grad=True) alpha=0.0083 for epoc in range(30): yhat=X@What ; yhat_history.append(yhat.data.tolist()) loss=torch.sum((y-yhat)**2); loss_history.append(loss.item()) loss.backward() What.data = What.data-alpha * What.grad; What_history.append(What.data.tolist()) What.grad=None . show_lrpr([x,y],[loss_history,yhat_history,What_history]) . Once Loop Reflect (3) $ alpha=0.0085$ . loss_history = [] # 기록하고 싶은것 1 yhat_history = [] # 기록하고 싶은것 2 What_history = [] # 기록하고 싶은것 3 . What= torch.tensor([-5.0,10.0],requires_grad=True) alpha=0.0085 for epoc in range(30): yhat=X@What ; yhat_history.append(yhat.data.tolist()) loss=torch.sum((y-yhat)**2); loss_history.append(loss.item()) loss.backward() What.data = What.data-alpha * What.grad.data; What_history.append(What.data.tolist()) What.grad=None . show_lrpr([x,y],[loss_history,yhat_history,What_history]) . Once Loop Reflect (4) $ alpha=0.01$ . loss_history = [] # 기록하고 싶은것 1 yhat_history = [] # 기록하고 싶은것 2 What_history = [] # 기록하고 싶은것 3 . What= torch.tensor([-5.0,10.0],requires_grad=True) alpha=0.01 for epoc in range(30): yhat=X@What ; yhat_history.append(yhat.data.tolist()) loss=torch.sum((y-yhat)**2); loss_history.append(loss.item()) loss.backward() What.data = What.data-alpha * What.grad; What_history.append(What.data.tolist()) What.grad=None . show_lrpr([x,y],[loss_history,yhat_history,What_history]) . Once Loop Reflect &#49689;&#51228; . - 학습률($ alpha$)를 조정하며 실습해보고 스크린샷 제출 .",
            "url": "https://guebin.github.io/DL2022/2022/09/20/(3%EC%A3%BC%EC%B0%A8)-9%EC%9B%9420%EC%9D%BC.html",
            "relUrl": "/2022/09/20/(3%EC%A3%BC%EC%B0%A8)-9%EC%9B%9420%EC%9D%BC.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Assignment 1 (09.19)",
            "content": "제출은 이름(학번).ipynb 파일과 이름(학번).html파일 2개를 제출할 것. | ipynb 혹은 html 파일을 이용한 제출이 익숙하지 않은 학생은 질문할 것. | 이 hw은 9월13일 + 9월15일 분량임 (다른숙제 대비 배점2배) | . from fastai.vision.all import * from fastai.collab import * from fastai.text.all import * . 1. &#51060;&#48120;&#51648;&#51088;&#47308;&#48516;&#49437; . 아래를 이용하여 MNIST_SAMPLE 이미지 자료를 다운로드 받고 dls오브젝트를 만들어라. . path = untar_data(URLs.MNIST_SAMPLE) . dls = ImageDataLoaders.from_folder(path,suffle=False) . dls.show_batch() . (1) cnn_learner를 이용하여 lrnr 오브젝트를 생성하라. . arch 는 resnet34 로 설정할 것 | metrics 는 error_rate 로 설정할 것 | . (풀이) . lrnr = cnn_learner(dls, arch = resnet34, metrics=error_rate) . /home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/learner.py:284: UserWarning: `cnn_learner` has been renamed to `vision_learner` -- please update your code warn(&#34;`cnn_learner` has been renamed to `vision_learner` -- please update your code&#34;) /home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/torchvision/models/_utils.py:209: UserWarning: The parameter &#39;pretrained&#39; is deprecated since 0.13 and will be removed in 0.15, please use &#39;weights&#39; instead. f&#34;The parameter &#39;{pretrained_param}&#39; is deprecated since 0.13 and will be removed in 0.15, &#34; /home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for &#39;weights&#39; are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights. warnings.warn(msg) . (2) fine_tune 을 이용하여 lrnr 오브젝트를 학습하라. . (풀이) . lrnr.fine_tune(1) . epoch train_loss valid_loss error_rate time . 0 | 0.282870 | 0.150136 | 0.049068 | 00:05 | . epoch train_loss valid_loss error_rate time . 0 | 0.042991 | 0.017522 | 0.006379 | 00:05 | . (3) 아래를 이용하여 X,y를 만들어라. . X,y = dls.one_batch() . X,y의 shape을 조사하라. X에는 몇개의 이미지가 있는가? 이미지의 size는 얼마인가? . (풀이) . X,y = dls.one_batch() X.shape . torch.Size([64, 3, 28, 28]) . X에는 64개의 이미지가 있고 크기는 (28,28) 이다. . (4) 아래의 코드를 이용하여 X의 두번째 이미지가 어떠한 숫자를 의미하는지 확인하라. (그림보고 3인지 7인지 확인하여 답을 쓸 것) . show_image(X[0]) . 그리고 show_image가 정의된 파일의 경로를 확인하고 show_image가 python 내장함수 인지, torch에서 지원하는 함수인지 fastai에서 지원하는 함수인지 파악하라. . (풀이) . show_image(X[1]) # 두번째 이미지 . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . &lt;AxesSubplot:&gt; . show_image? . Signature: show_image( im, ax=None, figsize=None, title=None, ctx=None, cmap=None, norm=None, *, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, interpolation_stage=None, filternorm=True, filterrad=4.0, resample=None, url=None, data=None, **kwargs, ) Docstring: Show a PIL or PyTorch image on `ax`. File: ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/torch_core.py Type: function . fastai에서 지원하는 함수 | . (5) lrnr 오브젝트를 이용하여 AI가 X[0]을 어떤 값으로 판단하는지 확인하라. 올바르게 판단하였는가? 올바르게 판단했다면 몇 프로의 확신으로 판단하였는가? &lt;-- 문제가 의도한 것과 다르게 만들어졌어요 . (풀이) . show_image(X[0]) # 첫번째 이미지 . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . &lt;AxesSubplot:&gt; . lrnr.model(X[0].reshape(1,3,28,28)) . TensorBase([[ 3.4148, -5.0356]], device=&#39;cuda:0&#39;, grad_fn=&lt;AliasBackward0&gt;) . import numpy as np a=np.exp(3.4148) b=np.exp(-5.0356) print(&#39;3일확률&#39;,a/(a+b)) print(&#39;7일확률&#39;,b/(a+b)) . 3일확률 0.9997862308347155 7일확률 0.0002137691652844868 . 원래문제의도:lrnr.predict(X[0].to(&quot;cpu&quot;)) . 2. &#52628;&#52380;&#49884;&#49828;&#53596; . 아래를 이용하여 rcmd_anal.csv 를 다운로드 받고 dls오브젝트를 만들어라. . df = pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-08-rcmd_anal.csv&#39;) df . user item rating item_name . 0 1 | 15 | 1.084308 | 홍차5 | . 1 1 | 1 | 4.149209 | 커피1 | . 2 1 | 11 | 1.142659 | 홍차1 | . 3 1 | 5 | 4.033415 | 커피5 | . 4 1 | 4 | 4.078139 | 커피4 | . ... ... | ... | ... | ... | . 995 100 | 18 | 4.104276 | 홍차8 | . 996 100 | 17 | 4.164773 | 홍차7 | . 997 100 | 14 | 4.026915 | 홍차4 | . 998 100 | 4 | 0.838720 | 커피4 | . 999 100 | 7 | 1.094826 | 커피7 | . 1000 rows × 4 columns . (1) 73번 유저가 먹은 아이템 및 평점을 출력하는 코드를 작성하라. 이를 기반으로 73번 유저가 어떠한 취향인지 파악하라. . (풀이) . df.query(&#39;user == 73&#39;) . user item rating item_name . 720 73 | 20 | 3.733853 | 홍차10 | . 721 73 | 18 | 3.975004 | 홍차8 | . 722 73 | 9 | 1.119541 | 커피9 | . 723 73 | 13 | 3.840801 | 홍차3 | . 724 73 | 2 | 0.943742 | 커피2 | . 725 73 | 4 | 1.152405 | 커피4 | . 726 73 | 1 | 0.887292 | 커피1 | . 727 73 | 7 | 0.947641 | 커피7 | . 728 73 | 6 | 0.868370 | 커피6 | . 729 73 | 17 | 3.873590 | 홍차7 | . 홍차를 선호 | . (2) dls와 lrnr 오브젝트를 생성하고 lrnr 오브젝트를 학습하라. . (풀이) . dls = CollabDataLoaders.from_df(df) lrnr = collab_learner(dls,y_range=(0,5)) . lrnr.fit(50) . epoch train_loss valid_loss time . 0 | 2.337114 | 2.258755 | 00:00 | . 1 | 2.328897 | 2.254714 | 00:00 | . 2 | 2.320246 | 2.237874 | 00:00 | . 3 | 2.300545 | 2.191783 | 00:00 | . 4 | 2.265857 | 2.104007 | 00:00 | . 5 | 2.207397 | 1.966761 | 00:00 | . 6 | 2.123599 | 1.783263 | 00:00 | . 7 | 2.008980 | 1.562448 | 00:00 | . 8 | 1.865242 | 1.317642 | 00:00 | . 9 | 1.697832 | 1.068948 | 00:00 | . 10 | 1.515044 | 0.833239 | 00:00 | . 11 | 1.326496 | 0.625003 | 00:00 | . 12 | 1.139156 | 0.453686 | 00:00 | . 13 | 0.962462 | 0.320953 | 00:00 | . 14 | 0.802481 | 0.223124 | 00:00 | . 15 | 0.662327 | 0.155420 | 00:00 | . 16 | 0.542384 | 0.110662 | 00:00 | . 17 | 0.442099 | 0.082435 | 00:00 | . 18 | 0.359706 | 0.064858 | 00:00 | . 19 | 0.292656 | 0.054441 | 00:00 | . 20 | 0.238817 | 0.048325 | 00:00 | . 21 | 0.195901 | 0.045092 | 00:00 | . 22 | 0.161955 | 0.043386 | 00:00 | . 23 | 0.135049 | 0.042616 | 00:00 | . 24 | 0.113653 | 0.042549 | 00:00 | . 25 | 0.096877 | 0.042678 | 00:00 | . 26 | 0.083618 | 0.043010 | 00:00 | . 27 | 0.073081 | 0.043308 | 00:00 | . 28 | 0.064768 | 0.043905 | 00:00 | . 29 | 0.058133 | 0.044605 | 00:00 | . 30 | 0.053050 | 0.044990 | 00:00 | . 31 | 0.048904 | 0.045569 | 00:00 | . 32 | 0.045665 | 0.045833 | 00:00 | . 33 | 0.043033 | 0.045906 | 00:00 | . 34 | 0.040883 | 0.046624 | 00:00 | . 35 | 0.039263 | 0.046878 | 00:00 | . 36 | 0.037608 | 0.047040 | 00:00 | . 37 | 0.036450 | 0.047146 | 00:00 | . 38 | 0.035638 | 0.047335 | 00:00 | . 39 | 0.034883 | 0.047623 | 00:00 | . 40 | 0.034177 | 0.048048 | 00:00 | . 41 | 0.033486 | 0.047836 | 00:00 | . 42 | 0.033047 | 0.048263 | 00:00 | . 43 | 0.032634 | 0.048296 | 00:00 | . 44 | 0.032165 | 0.048577 | 00:00 | . 45 | 0.031884 | 0.048578 | 00:00 | . 46 | 0.031517 | 0.048725 | 00:00 | . 47 | 0.031158 | 0.048977 | 00:00 | . 48 | 0.030711 | 0.048955 | 00:00 | . 49 | 0.030465 | 0.049127 | 00:00 | . (3) 아래와 같은 데이터 프레임을 생성하고 df_new 에 저장하라. . import IPython _html=&#39;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n &lt;thead&gt; n &lt;tr style=&quot;text-align: right;&quot;&gt; n &lt;th&gt;&lt;/th&gt; n &lt;th&gt;user&lt;/th&gt; n &lt;th&gt;item&lt;/th&gt; n &lt;/tr&gt; n &lt;/thead&gt; n &lt;tbody&gt; n &lt;tr&gt; n &lt;th&gt;0&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;1&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;1&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;2&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;2&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;3&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;3&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;4&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;4&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;5&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;5&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;6&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;6&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;7&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;7&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;8&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;8&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;9&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;9&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;10&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;10&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;11&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;11&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;12&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;12&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;13&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;13&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;14&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;14&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;15&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;15&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;16&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;16&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;17&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;17&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;18&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;18&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;19&lt;/td&gt; n &lt;/tr&gt; n &lt;tr&gt; n &lt;th&gt;19&lt;/th&gt; n &lt;td&gt;73&lt;/td&gt; n &lt;td&gt;20&lt;/td&gt; n &lt;/tr&gt; n &lt;/tbody&gt; n&lt;/table&gt;&#39; IPython.display.HTML(_html) . . user item . 0 73 | 1 | . 1 73 | 2 | . 2 73 | 3 | . 3 73 | 4 | . 4 73 | 5 | . 5 73 | 6 | . 6 73 | 7 | . 7 73 | 8 | . 8 73 | 9 | . 9 73 | 10 | . 10 73 | 11 | . 11 73 | 12 | . 12 73 | 13 | . 13 73 | 14 | . 14 73 | 15 | . 15 73 | 16 | . 16 73 | 17 | . 17 73 | 18 | . 18 73 | 19 | . 19 73 | 20 | . (풀이) . df_new=pd.DataFrame({&#39;user&#39;:[73]*20,&#39;item&#39;:range(1,21)}) df_new . user item . 0 73 | 1 | . 1 73 | 2 | . 2 73 | 3 | . 3 73 | 4 | . 4 73 | 5 | . 5 73 | 6 | . 6 73 | 7 | . 7 73 | 8 | . 8 73 | 9 | . 9 73 | 10 | . 10 73 | 11 | . 11 73 | 12 | . 12 73 | 13 | . 13 73 | 14 | . 14 73 | 15 | . 15 73 | 16 | . 16 73 | 17 | . 17 73 | 18 | . 18 73 | 19 | . 19 73 | 20 | . (4) 아래의 코드를 이용하여 73번 유저의 취향을 파악하라. 73번 유저가 커피3, 커피5를 먹는다면 얼마정도의 평점을 줄 것이라 예측되는가? . _dl = dls.test_dl(df_new) lrnr.get_preds(dl=_dl) . (풀이) . _dl = dls.test_dl(df_new) lrnr.get_preds(dl=_dl) . (tensor([0.9698, 1.0314, 1.0191, 1.0177, 1.0122, 0.9323, 1.0513, 1.0184, 1.0316, 0.9842, 3.8255, 3.9591, 3.8640, 3.8937, 3.9437, 3.8947, 3.8272, 3.9503, 3.8117, 3.8603]), None) . 커피3: 1.0191, 커피5: 1.0122 | . 3. &#49884;&#53248;&#49828;&#51088;&#47308;&#48516;&#49437; . 아래를 이용하여 자료를 다운로드 받아라. . df = pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-19-human_numbers_100.csv&#39;) df . Unnamed: 0 text . 0 0 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 1 1 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 2 2 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 3 3 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 4 4 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . ... ... | ... | . 1995 1995 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 1996 1996 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 1997 1997 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 1998 1998 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 1999 1999 | one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seve... | . 2000 rows × 2 columns . (1) TextDataLoaders.from_df을 이용하여 dls오브젝트를 만들어라. . is_lm = True 로 설정할 것 | seq_len = 5 로 설정할 것 | . (풀이) . dls = TextDataLoaders.from_df(df,is_lm=True,seq_len=5,text_col=&#39;text&#39;) dls.show_batch() . text text_ . 0 xxbos one , two , | one , two , three | . 1 hundred xxbos one , two | xxbos one , two , | . 2 one hundred xxbos one , | hundred xxbos one , two | . 3 , one hundred xxbos one | one hundred xxbos one , | . 4 nine , one hundred xxbos | , one hundred xxbos one | . 5 ninety nine , one hundred | nine , one hundred xxbos | . 6 , ninety nine , one | ninety nine , one hundred | . 7 eight , ninety nine , | , ninety nine , one | . 8 ninety eight , ninety nine | eight , ninety nine , | . (2) lrnr 오브젝트를 만들어라. . arch = AWD_LSTM 이용 | metrics = accuracy 이용 | . (풀이) . lrnr = language_model_learner(dls, arch= AWD_LSTM, metrics=accuracy) . (3) lrnr오브젝트에서 fine_tune(3) 메소드를 이용하여 모형을 학습하라. . (풀이) . lrnr.fine_tune(3) . epoch train_loss valid_loss accuracy time . 0 | 0.534681 | 0.168856 | 0.977650 | 00:49 | . epoch train_loss valid_loss accuracy time . 0 | 0.018749 | 0.003256 | 0.999205 | 00:54 | . 1 | 0.001580 | 0.002430 | 0.999324 | 00:54 | . 2 | 0.000651 | 0.002244 | 0.999315 | 00:54 | . (4) &#39;one , two ,&#39; 이후에 이어질 50개의 단어를 생성하라. . (풀이) . lrnr.predict(&#39;one, two,&#39;, n_words=50) . &#39;one , two , three , four , five , six , seven , eight , nine , ten , eleven , twelve , thirteen , fourteen , fifteen , sixteen , seventeen , eighteen , nineteen , twenty , twenty one , twenty two , twenty three , twenty four , twenty five&#39; . (5) &#39;twenty , twenty one , &#39; 이후에 이어질 50개의 단어를 생성하라. . (풀이) . lrnr.predict(&#39;twenty, twenty one,&#39;, n_words=50) . &#39;twenty , twenty one , twenty two , twenty three , twenty four , twenty five , twenty six , twenty seven , twenty eight , twenty nine , thirty , thirty one , thirty two , thirty three , thirty four , thirty five , thirty six , thirty seven , thirty eight ,&#39; . 4. &#47532;&#45573;&#49828;&#47749;&#47161;&#50612; . Collab 에서 (혹은 리눅스기반 서버에서) 아래의 명령어를 순서대로 실행해보라. . !ls !ls -a !ls . !ls .. !ls sample !mkdir asdf !wget https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-08-rcmd_anal.csv !cp 2022-09-08-rcmd_anal.csv ./asdf !ls ./asdf !rm 2022-09-08-rcmd_anal.csv !rm -rf asdf . 각 명령들이 무엇을 의미하는지 간단히 서술하라. . (풀이) . !ls . 현재디렉토리 파일+폴더 출력 | !ls . 와 같음 | !ls ./ 와 같음 | . !ls -a . 현재디렉토리 파일+폴더 출력, 숨겨진 항목까지 출력 | . !ls . . 현재디렉토리 파일+폴더 출력 | !ls 와 같음 | !ls ./ 와 같음 | . !ls .. . 현재디렉토리보다 상위디렉토리의 파일+폴더 출력 | . !ls sample . 현재디렉토리에 sample 디렉토리 출력 | !ls ./sample 과 같음 | . !mkdir asdf . 현재디렉토리에 asdf 폴더 생성 | !mkdir ./asdf 와 같음 | . !wget https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-08-rcmd_anal.csv . url에 있는 파일 다운로드하여 현재디렉토리에 저장 | . !cp 2022-09-08-rcmd_anal.csv ./asdf . 2022-09-08-rcmd_anal.csv 파일을 ./asdf 로 복사 | . !ls ./asdf . 현재디렉토리에서 asdf 디렉토리의 내용출력 | !ls asdf 와 같음 | . !rm 2022-09-08-rcmd_anal.csv . 현재 디렉토리에서 2022-09-08-rcmd_anal.csv 파일삭제; | rm ./2022-09-08-rcmd_anal.csv 와 같음 | . !rm -rf asdf . 현재 디렉토리에서 asdf 삭제 (asdf 폴더내에 파일이 존재하면 파일도 같이 삭제) | r은 recursively, f는 force의 약자 | . Appendix: ipynb -&gt; html &#48320;&#54872; . .",
            "url": "https://guebin.github.io/DL2022/2022/09/19/Assignment-1.html",
            "relUrl": "/2022/09/19/Assignment-1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "(3주차) 9월15일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . imports . from fastai.vision.all import * from fastai.vision.gan import * . fastai&#47484; &#51060;&#50857;&#54620; &#48516;&#49437; steps . - 비교 . 이미지분석(CNN) 추천시스템 텍스트분석 GAN . 1단계 | ImageDataLoaders | CollabDataLoaders | TextDataLoaders | DataBlock -&gt; dls | . 2단계 | cnn_learner() | collab_learner() | language_model_learner() | GANLearner.wgan() | . 3단계 | lrnr.fine_tune(1) | lrnr.fit() | lrnr.fit() | lrnr.fit() | . 4단계 | lrnr.predict(), lrnr.model(X) | lrnr.model(X) | lrnr.predict() | | . &#51060;&#48120;&#51648;&#48516;&#49437;, &#52628;&#52380;&#49884;&#49828;&#53596;, &#53581;&#49828;&#53944;&#48516;&#49437;&#51032; &#51221;&#47532; . - 데이터는 모두 아래와 같은 느낌이다. . (1) 데이터는 $(X,y)$의 형태로 정리되어 있다. . (2) $y$는 우리가 관심이 있는 변수이다. 즉 우리는 $y$를 적절하게 추정하는 것에 관심이 있다. . (3) $X$는 $y$를 추정하기 위해 필요한 정보이다. . $X$ = 설명변수 = 독립변수 $y$ = 반응변수 = 종속변수 비고 순서 예시 . 이미지 | 카테고리 | 합성곱신경망 | 상관없음 | 개/고양이 이미지 구분 | . 유저,아이템 | 평점 | 추천시스템 | 상관없음 | 넷플릭스 영화추천 | . 과거~오늘까지의주가 | 내일주가 | 순환신경망 | 순서상관있음 | 주가예측 | . 처음 $m$개의 단어(혹은 문장) | 이후 1개의 단어(혹은 문장) | 순환신경망 | 순서상관있음 | 챗봇, 텍스트생성 | . 처음 $m$개의 단어(혹은 문장) | 카테고리 | 순환신경망 | 순서상관있음 | 영화리뷰 텍스트 감정분류 | . - 학습이란 주어진 자료 $(X,y)$를 잘 분석하여 $X$에서 $y$로 가는 어떠한 &quot;규칙&quot; 혹은 &quot;원리&quot;를 찾는 것이다. . 학습이란 주어진 자료 $(X,y)$를 잘 분석하여 $X$에서 $y$로 가는 어떠한 &quot;맵핑&quot;을 찾는 것이다. | 학습이란 주어진 자료 $(X,y)$를 잘 분석하여 $X$에서 $y$로 가는 어떠한 &quot;힘수&quot;을 찾는 것이다. 즉 $y approx f(X)$가 되도록 만드는 $f$를 잘 찾는 것이다. (이 경우 함수를 추정한다라고 표현) | 학습이란 주어진 자료 $(X,y)$를 잘 분석하여 $X$에서 $y$로 가는 어떠한 &quot;모델&quot;을 찾는 것이다. 즉 $y approx model(X)$가 되도록 만드는 $model$을 잘 찾는 것이다. (이 경우 모형을 학습시킨다라고 표현) | 학습이란 주어진 자료 $(X,y)$를 잘 분석하여 $X$에서 $y$로 가는 어떠한 &quot;네트워크&quot;을 찾는 것이다. 즉 $y approx net(X)$가 되도록 만드는 $net$을 잘 찾는 것이다. (이 경우 모형을 네트워크를 학습시킨다라고 표현) | . - prediction이란 학습과정에서 찾은 &quot;규착&quot; 혹은 &quot;원리&quot;를 $X$에 적용하여 $ hat{y}$을 구하는 과정이다. 학습과정에서 찾은 규칙 혹은 원리는 $f$,$model$,$net$ 으로 생각가능한데 이에 따르면 아래가 성립한다. . $ hat{y} = f(X)$ | $ hat{y} = model(X)$ | $ hat{y} = net(X)$ | . 자잘한개념 . - $ hat{y}$는 $X$가 주어진 자료에 있는 값인지 아니면 새로운 값 인지에 따라 지칭하는 이름이 미묘하게 다르다. . (경우1) $X in data$: $ hat{y}=net(X)$ 는 predicted value, fitted value 라고 부른다. . (경우2) $X notin data$: $ hat{y}=net(X)$ 는 predicted value, predicted value with new data 라고 부른다. . - 경우1은 &quot;$loss$ = $y$ 와 $ hat{y}$ 의 차이&quot; 를 정의할 수 있으나 경우2는 그렇지 않다. . GAN intro . - 저자: 이안굿펠로우 . 천재임 | 지도교수가 요수아 벤지오 | . - 논문 NIPS, 저는 이 논문 읽고 소름돋았어요.. . https://arxiv.org/abs/1406.2661 (현재시점, 38751회 인용되었음 $ to$ 48978회 인용..) | . - 최근 10년간 머신러닝 분야에서 가장 혁신적인 아이디어이다. (얀르쿤, 2014년 시점..) . - 무슨내용? 생성모형 . &#49373;&#49457;&#47784;&#54805;&#51060;&#46976;? (&#49772;&#50868; &#49444;&#47749;) . 만들수 없다면 이해하지 못한 것이다, 리처드 파인만 (천재 물리학자) . - 사진속에 들어있는 동물이 개인지 고양이인지 맞출수 있는 기계와 개와 고양이를 그릴수 있는 기계중 어떤것이 더 시각적보에 대한 이해가 깊다고 볼수 있는가? . - 진정으로 인공지능이 이미지를 이해했다면, 이미지를 만들수도 있어야 한다. $ to$ 이미지를 생성하는 모형을 만들어보자 $ to$ 성공 . . GAN&#51032; &#51025;&#50857;&#48516;&#50556; . - 내가 찍은 사진이 피카소의 화풍으로 표현된다면? . - 퀸의 라이브에이드가 4k로 나온다면? . - 1920년대 서울의 모습이 칼라로 복원된다면? . - 딥페이크: 유명인의 가짜 포르노, 가짜뉴스, 협박(거짓기소) . - 게임영상 (파이널판타지) . - 거북이의 커버.. . - 너무 많아요..... . &#49373;&#49457;&#47784;&#54805;&#51060;&#46976;? &#53685;&#44228;&#54617;&#44284; &#48260;&#51204;&#51032; &#49444;&#47749; . 제한된 정보만으로 어떤 문제를 풀 때, 그 과정에서 원래의 문제보다 일반적인 문제를 풀지 말고, 가능한 원래의 문제를 직접 풀어야한다. 배프닉 (SVM 창시자) . - 이미지 $ boldsymbol{x}$가 주어졌을 경우 라벨을 $y$라고 하자. . - 이미지를 생성하는 일은 $p( boldsymbol{x},y)$에 관심이 있는것이다. 여기에서 $p( boldsymbol{x},y)$는 ${ boldsymbol x},y$의 결합확률밀도함수. . - 이미지를 보고 라벨을 맞추는 일은 $p(y| boldsymbol{x})$에 관심이 있다. 여기에서 $p(y| boldsymbol{x})$는 조건부 확률밀도 함수 . - 데이터의 생성확률 $p( boldsymbol{x},y)$을 알면 클래스의 사후확률 $p(y| boldsymbol{x})$를 알 수 있음. (아래의 수식 참고) 하지만 역은 불가능 . $$p(y|{ boldsymbol x}) = frac{p({ boldsymbol x},y)}{p({ boldsymbol x})} = frac{p({ boldsymbol x},y)}{ sum_{y}p({ boldsymbol x},y)} $$ . 즉 이미지를 생성하는일은 분류문제보다 더 어려운 일이라 해석가능 | . - 따라서 배프닉의 원리에 의하면 식별적 분류가 생성적 분류보다 바람직한 접근법이라 할 수 있음. . - 하지만 다양한 현실문제에서 생성모형이 유용할때가 많다. . GAN&#51032; &#50896;&#47532; . - GAN은 생성모형중 하나임 . - GAN의 원리는 경찰과 위조지폐범이 서로 선의의(?) 경쟁을 통하여 서로 발전하는 모형으로 설명할 수 있다. . The generative model can be thought of as analogous to a team of counterfeiters, trying to produce fake currency and use it without detection, while the discriminative model is analogous to the police, trying to detect the counterfeit currency. Competition in this game drives both teams to improve their methods until the counterfeits are indistiguishable from the genuine articles. . - 서로 적대적인(adversarial) 네트워크(network)를 동시에 학습시켜 가짜이미지를 만든다(generate) . - 무식한 상황극.. . 위조범: 가짜돈을 만들어서 부자가 되어야지! (가짜돈을 그림) | 경찰: (위조범이 만든 돈을 보고) 이건 가짜다! | 위조범: 걸렸군.. 더 정교하게 만들어야지.. | 경찰: 이건 진짠가?... --&gt; 상사에게 혼남. 그것도 구분못하냐고 | 위조범: 더 정교하게 만들자.. | 경찰: 더 판별능력을 업그레이드 하자! | 반복.. | . - 굉장히 우수한 경찰조차도 진짜와 가짜를 구분하지 못할때(=진짜 이미지를 0.5의 확률로만 진짜라고 말할때 = 가짜 이미지를 0.5의 확률로만 가짜라고 말할때) 학습을 멈춘다. . &#50500;&#53412;&#53581;&#52376; . - 아래와 같은 두 모델(네트워크)를 생각하자. . 위조범네트워크: X=노이즈(=아무숫자) $ to$ y=지폐이미지(=가짜지폐) | 경찰네트워크: X={가짜지폐,진짜지폐} $ to$ y={진짜,가짜} | . - 전체 알고리즘은 아래와 같은 순서로 돌아간다. (전체 이미지 자료는 $n$개라고 하자) . (1) 적당한 크기의 $n$개의 노이즈가 위조범네트워크에 입력으로 들어감 . (2) 위조범네트워크는 적당한 크기의 $n$개의 노이즈를 입력으로 받고 출력으로 $n$개의 이미지를 뱉어냄. . (3) 위조범이 뱉어낸 이미지와 진짜이미지를 합쳐 $2n$개의 자료를 만들고 이를 경창네트워크의 입력으로 넣음. . (4) 경찰네트워크는 $2n$개의 자료를 입력으로 받아서 $2n$개의 예측결과를 제공. . GAN &#49892;&#49845; . 1&#45800;&#44228; . path = untar_data(URLs.MNIST_SAMPLE) . dblock = DataBlock(blocks=(TransformBlock,ImageBlock), get_x = generate_noise, get_items=get_image_files, item_tfms=Resize(32)) dls = dblock.dataloaders(path) . dls.show_batch() . 2&#45800;&#44228; . counterfeiter = basic_generator(32,n_channels=3,n_extra_layers=1) # 32*32의 이미지가 칼라이미지로 출력. police = basic_critic(32,n_channels=3,n_extra_layers=1) # 32*32의 칼라이미지가 입력으로 들어옴. . lrnr = GANLearner.wgan(dls,counterfeiter,police) . 3&#45800;&#44228; . - lrnr.fit(10) 진행 . lrnr.fit(10) . epoch train_loss valid_loss gen_loss crit_loss time . 0 | -0.546135 | 0.362349 | 0.362349 | -0.757082 | 00:02 | . 1 | -0.582954 | 0.300018 | 0.300018 | -0.770161 | 00:02 | . 2 | -0.585224 | 0.277624 | 0.277624 | -0.769241 | 00:02 | . 3 | -0.582842 | 0.385249 | 0.385249 | -0.764790 | 00:02 | . 4 | -0.584591 | 0.333895 | 0.333895 | -0.768902 | 00:02 | . 5 | -0.587377 | 0.304535 | 0.304535 | -0.773640 | 00:02 | . 6 | -0.580959 | 0.274871 | 0.274871 | -0.765747 | 00:02 | . 7 | -0.559458 | 0.348925 | 0.348925 | -0.734318 | 00:02 | . 8 | -0.486598 | 0.074547 | 0.074547 | -0.545082 | 00:03 | . 9 | -0.550950 | 0.278006 | 0.278006 | -0.724520 | 00:03 | . lrnr.show_results() . - lrnr.fit(10) 추가로 진행 // 총20회 . lrnr.fit(10) . epoch train_loss valid_loss gen_loss crit_loss time . 0 | -0.534234 | 0.261044 | 0.261044 | -0.737007 | 00:02 | . 1 | -0.515386 | 0.241006 | 0.241006 | -0.720394 | 00:02 | . 2 | -0.561530 | 0.249572 | 0.249572 | -0.742900 | 00:02 | . 3 | -0.544423 | 0.315043 | 0.315043 | -0.739004 | 00:02 | . 4 | -0.534188 | 0.235120 | 0.235120 | -0.686251 | 00:02 | . 5 | -0.494047 | 0.284046 | 0.284046 | -0.633201 | 00:02 | . 6 | -0.506470 | 0.214011 | 0.214011 | -0.687545 | 00:02 | . 7 | -0.527870 | 0.262492 | 0.262492 | -0.731213 | 00:02 | . 8 | -0.504433 | 0.192755 | 0.192755 | -0.674976 | 00:02 | . 9 | -0.538148 | 0.204089 | 0.204089 | -0.728712 | 00:02 | . lrnr.show_results() . - lrnr.fit(30) 추가로 진행 // 총50회 . lrnr.fit(30) . epoch train_loss valid_loss gen_loss crit_loss time . 0 | -0.509745 | 0.286478 | 0.286478 | -0.691290 | 00:02 | . 1 | -0.502572 | 0.285199 | 0.285199 | -0.675554 | 00:02 | . 2 | -0.473333 | 0.219742 | 0.219742 | -0.650543 | 00:02 | . 3 | -0.419040 | 0.287789 | 0.287789 | -0.543150 | 00:02 | . 4 | -0.275088 | 0.264852 | 0.264852 | -0.105730 | 00:02 | . 5 | -0.350050 | 0.330111 | 0.330111 | -0.529484 | 00:02 | . 6 | -0.394095 | 0.228335 | 0.228335 | -0.616371 | 00:02 | . 7 | -0.247936 | 0.177943 | 0.177943 | -0.286712 | 00:02 | . 8 | -0.333396 | 0.207328 | 0.207328 | -0.585255 | 00:02 | . 9 | -0.370004 | 0.356040 | 0.356040 | -0.641916 | 00:02 | . 10 | -0.463898 | 0.195165 | 0.195165 | -0.215188 | 00:02 | . 11 | -0.241843 | 0.110512 | 0.110512 | -0.411598 | 00:02 | . 12 | -0.227809 | -0.094414 | -0.094414 | -0.306309 | 00:02 | . 13 | -0.185607 | -0.063660 | -0.063660 | -0.261691 | 00:02 | . 14 | -0.219289 | -0.041734 | -0.041734 | -0.424938 | 00:02 | . 15 | -0.048843 | 0.063750 | 0.063750 | -0.088812 | 00:02 | . 16 | -0.092374 | -0.218327 | -0.218327 | -0.001817 | 00:02 | . 17 | -0.081938 | -0.068263 | -0.068263 | -0.052643 | 00:02 | . 18 | -0.031063 | -0.183604 | -0.183604 | -0.013827 | 00:02 | . 19 | -0.025211 | 0.041027 | 0.041027 | -0.061204 | 00:02 | . 20 | -0.023948 | 0.244387 | 0.244387 | -0.001813 | 00:02 | . 21 | -0.073112 | 0.275998 | 0.275998 | -0.150063 | 00:02 | . 22 | -0.064780 | 0.112151 | 0.112151 | -0.123186 | 00:02 | . 23 | -0.030959 | 0.002616 | 0.002616 | -0.134843 | 00:02 | . 24 | -0.066342 | 0.604107 | 0.604107 | -0.118417 | 00:02 | . 25 | -0.025819 | 0.066880 | 0.066880 | -0.087840 | 00:02 | . 26 | -0.061908 | -0.129382 | -0.129382 | -0.101803 | 00:02 | . 27 | -0.096987 | -0.213048 | -0.213048 | -0.081656 | 00:02 | . 28 | -0.114984 | 0.287159 | 0.287159 | -0.152345 | 00:02 | . 29 | -0.062543 | -0.076906 | -0.076906 | -0.078245 | 00:02 | . lrnr.show_results() . 그럴싸한 글씨가 몇개 보이긴 함 | . 4&#45800;&#44228; (&#50630;&#51020;) .",
            "url": "https://guebin.github.io/DL2022/2022/09/15/(3%EC%A3%BC%EC%B0%A8)-9%EC%9B%9415%EC%9D%BC.html",
            "relUrl": "/2022/09/15/(3%EC%A3%BC%EC%B0%A8)-9%EC%9B%9415%EC%9D%BC.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "(2주차) 9월13일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . imports . from fastai.collab import * ## 추천시스템 from fastai.text.all import * ## 텍스트분석 . import pandas as pd . fastai&#47484; &#51060;&#50857;&#54620; &#48516;&#49437; steps . - 비교 . 이미지분석(CNN) 추천시스템 텍스트분석 GAN . 1단계 | ImageDataLoaders | CollabDataLoaders | TextDataLoaders | DataBlock -&gt; dls | . 2단계 | cnn_learner() | collab_learner() | language_model_learner() | GANLearner.wgan() | . 3단계 | lrnr.fine_tune(1) | lrnr.fit() | lrnr.fit() | lrnr.fit() | . 4단계 | lrnr.predict(), lrnr.model(X) | lrnr.model(X) | lrnr.predict() | | . &#52628;&#52380;&#49884;&#49828;&#53596; &#49892;&#49845; . 1&#45800;&#44228; . df_view = pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-08-rcmd_view.csv&#39;) df_view . 커피1 커피2 커피3 커피4 커피5 커피6 커피7 커피8 커피9 커피10 홍차1 홍차2 홍차3 홍차4 홍차5 홍차6 홍차7 홍차8 홍차9 홍차10 . 0 4.149209 | NaN | NaN | 4.078139 | 4.033415 | 4.071871 | NaN | NaN | NaN | NaN | 1.142659 | 1.109452 | NaN | 0.603118 | 1.084308 | NaN | 0.906524 | NaN | NaN | 0.903826 | . 1 4.031811 | NaN | NaN | 3.822704 | NaN | NaN | NaN | 4.071410 | 3.996206 | NaN | NaN | 0.839565 | 1.011315 | NaN | 1.120552 | 0.911340 | NaN | 0.860954 | 0.871482 | NaN | . 2 4.082178 | 4.196436 | NaN | 3.956876 | NaN | NaN | NaN | 4.450931 | 3.972090 | NaN | NaN | NaN | NaN | 0.983838 | NaN | 0.918576 | 1.206796 | 0.913116 | NaN | 0.956194 | . 3 NaN | 4.000621 | 3.895570 | NaN | 3.838781 | 3.967183 | NaN | NaN | NaN | 4.105741 | 1.147554 | NaN | 1.346860 | NaN | 0.614099 | 1.297301 | NaN | NaN | NaN | 1.147545 | . 4 NaN | NaN | NaN | NaN | 3.888208 | NaN | 3.970330 | 3.979490 | NaN | 4.010982 | NaN | 0.920995 | 1.081111 | 0.999345 | NaN | 1.195183 | NaN | 0.818332 | 1.236331 | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 95 0.511905 | 1.066144 | NaN | 1.315430 | NaN | 1.285778 | NaN | 0.678400 | 1.023020 | 0.886803 | NaN | 4.055996 | NaN | NaN | 4.156489 | 4.127622 | NaN | NaN | NaN | NaN | . 96 NaN | 1.035022 | NaN | 1.085834 | NaN | 0.812558 | NaN | 1.074543 | NaN | 0.852806 | 3.894772 | NaN | 4.071385 | 3.935935 | NaN | NaN | 3.989815 | NaN | NaN | 4.267142 | . 97 NaN | 1.115511 | NaN | 1.101395 | 0.878614 | NaN | NaN | NaN | 1.329319 | NaN | 4.125190 | NaN | 4.354638 | 3.811209 | 4.144648 | NaN | NaN | 4.116915 | 3.887823 | NaN | . 98 NaN | 0.850794 | NaN | NaN | 0.927884 | 0.669895 | NaN | NaN | 0.665429 | 1.387329 | NaN | NaN | 4.329404 | 4.111706 | 3.960197 | NaN | NaN | NaN | 3.725288 | 4.122072 | . 99 NaN | NaN | 1.413968 | 0.838720 | NaN | NaN | 1.094826 | 0.987888 | NaN | 1.177387 | 3.957383 | 4.136731 | NaN | 4.026915 | NaN | NaN | 4.164773 | 4.104276 | NaN | NaN | . 100 rows × 20 columns . row0 - row49 에 해당하는 유저는 커피를 선호 | row50 - row99 에 해당하는 유저는 홍차를 선호 | . df = pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-08-rcmd_anal.csv&#39;) df . user item rating item_name . 0 1 | 15 | 1.084308 | 홍차5 | . 1 1 | 1 | 4.149209 | 커피1 | . 2 1 | 11 | 1.142659 | 홍차1 | . 3 1 | 5 | 4.033415 | 커피5 | . 4 1 | 4 | 4.078139 | 커피4 | . ... ... | ... | ... | ... | . 995 100 | 18 | 4.104276 | 홍차8 | . 996 100 | 17 | 4.164773 | 홍차7 | . 997 100 | 14 | 4.026915 | 홍차4 | . 998 100 | 4 | 0.838720 | 커피4 | . 999 100 | 7 | 1.094826 | 커피7 | . 1000 rows × 4 columns . 컴퓨터는 이러한 형태를 더 분석하기 좋아한다. | . df.item.unique(),df.user.unique() # 유저는 1~100 으로 아이템은 1~20으로 번호가 매겨져 있음 . (array([15, 1, 11, 5, 4, 14, 6, 20, 12, 17, 8, 9, 13, 19, 18, 16, 2, 3, 10, 7]), array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])) . dls=CollabDataLoaders.from_df(df) . dls.show_batch() . user item rating . 0 2 | 1 | 4.031811 | . 1 40 | 19 | 1.015886 | . 2 39 | 20 | 0.853394 | . 3 58 | 8 | 0.854745 | . 4 38 | 6 | 4.055263 | . 5 45 | 17 | 0.608018 | . 6 59 | 14 | 3.986921 | . 7 6 | 12 | 0.833454 | . 8 98 | 13 | 4.354638 | . 9 74 | 12 | 4.199568 | . X,y= dls.one_batch() . X[0],y[0] . (tensor([64, 15]), tensor([4.1146])) . 64번 유저가 15번 아이템을 먹었을때 평점을 4.1146 주었음 | . 2&#45800;&#44228; . lrnr = collab_learner(dls,y_range=(0,5)) # y_range는 평점의 범위 . 3&#45800;&#44228; . lrnr.fit(10) # 총 30번 정도 해야 적합이 잘된다. . epoch train_loss valid_loss time . 0 | 0.044790 | 0.064825 | 00:00 | . 1 | 0.042065 | 0.059010 | 00:00 | . 2 | 0.039907 | 0.055658 | 00:00 | . 3 | 0.038412 | 0.053847 | 00:00 | . 4 | 0.037186 | 0.052595 | 00:00 | . 5 | 0.036020 | 0.052121 | 00:00 | . 6 | 0.035041 | 0.051959 | 00:00 | . 7 | 0.034370 | 0.051995 | 00:00 | . 8 | 0.033759 | 0.052022 | 00:00 | . 9 | 0.033237 | 0.052229 | 00:00 | . 4&#45800;&#44228; . - 하나의 배치 전체를 예측 . yhat=lrnr.model(X.to(&quot;cuda:0&quot;)) yhat . tensor([4.0162, 0.9041, 4.0706, 0.9730, 0.9861, 1.1032, 4.0559, 4.0745, 3.9329, 4.0195, 3.9139, 4.0732, 3.8666, 3.9556, 0.9634, 1.0055, 0.9944, 3.9826, 4.0456, 0.9961, 0.9438, 0.9291, 4.0212, 1.0700, 4.0543, 4.0441, 4.0918, 0.9850, 1.0140, 4.1212, 4.0628, 3.9923, 4.0395, 0.9331, 3.9581, 3.9999, 1.1152, 3.9131, 4.0565, 3.9264, 3.9619, 0.9421, 1.1348, 4.0688, 0.8939, 0.9684, 1.0505, 1.1034, 1.1027, 3.9411, 1.0582, 3.9680, 4.0465, 3.9554, 4.0419, 1.0965, 1.0784, 0.9954, 4.0205, 0.9373, 3.9045, 1.0255, 3.8102, 1.0640], device=&#39;cuda:0&#39;, grad_fn=&lt;AddBackward0&gt;) . lrnr.model()은 GPU메모리에 존재하고 X는 일반메모리에 존재하므로 X를 GPU메모리로 옮겨주어야 함 | X.to(&quot;cuda:0&quot;)을 통하여 X를 GPU메모리로 옮기는 작업을 수행할 수 있다. | . - 하나의 유저가 하나의 아이템을 선택했다고 가정하고 예측 (주어진 자료중에서 예측) . X.shape . torch.Size([64, 2]) . X[0:1] . tensor([[18, 5]]) . 18번 유저가 5번 아이템(커피)를 먹는다면? | . lrnr.model(X[0:1].to(&quot;cuda:0&quot;)) . tensor([4.1128], device=&#39;cuda:0&#39;, grad_fn=&lt;AddBackward0&gt;) . 평점은 4.1128정도 될것 | . - 하나의 유저가 하나의 아이템을 선택했다고 가정하고 예측 (주어지지 않은 자료중에서 예측) . X[0:1] . tensor([[18, 5]]) . Xnew = torch.tensor([[1, 2]]) . lrnr.model(Xnew.to(&quot;cuda:0&quot;)) . tensor([3.9397], device=&#39;cuda:0&#39;, grad_fn=&lt;AddBackward0&gt;) . &#53581;&#49828;&#53944;&#48516;&#49437; &#49892;&#49845; . 1&#45800;&#44228; . df = pd.DataFrame({&#39;text&#39;:[&#39;h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ??&#39;]*20000}) df . text . 0 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 1 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 2 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 3 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 4 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . ... ... | . 19995 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 19996 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 19997 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 19998 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 19999 h e l l o . h e l l o ! h e l l o ? h e l l o !! h e l l o ?? | . 20000 rows × 1 columns . dls = TextDataLoaders.from_df(df,text_col=&#39;text&#39;,is_lm=True) . dls.show_batch() . text text_ . 0 xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o | h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . | . 1 ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l | xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o | . 2 ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l | ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l | . 3 o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e | ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l | . 4 l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h | o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e | . 5 l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos | l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h | . 6 e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? | l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos | . 7 h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? | e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? | . 8 ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o | h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? ? xxbos h e l l o . h e l l o ! h e l l o ? h e l l o ! ! h e l l o ? | . is_lm: text의 생성에 관심이 있다면 True로 설정할 것 | . 2&#45800;&#44228; . lrnr = language_model_learner(dls, AWD_LSTM) . 3&#45800;&#44228; . lrnr.fit(1) . epoch train_loss valid_loss time . 0 | 0.575245 | 0.245803 | 00:11 | . 4&#45800;&#44228; . lrnr.predict(&#39;h e&#39;,n_words=30) . &#39;h e l l l o . h e l l . e l l o ? ? h e l l o ! ! h e l l o !&#39; .",
            "url": "https://guebin.github.io/DL2022/2022/09/13/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%9413%EC%9D%BC.html",
            "relUrl": "/2022/09/13/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%9413%EC%9D%BC.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "(2주차) 9월8일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . imports . from fastai.vision.all import * . &#51648;&#45212;&#49884;&#44036; &#48373;&#49845; . (1) 데이터의 정리 . path = untar_data(URLs.PETS)/&#39;images&#39; . fnames = get_image_files(path) . f = lambda fname: &#39;cat&#39; if fname[0].isupper() else &#39;dog&#39; . dls = ImageDataLoaders.from_name_func( path, fnames, f, # f대신 (lambda fname: &#39;cat&#39; if fname[0].isupper() else &#39;dog&#39;) 를 넣어도 가능 item_tfms=Resize(224)) . (2) lrnr 오브젝트 생성 . lrnr = cnn_learner(dls,resnet34,metrics=error_rate) . (3) lrnr.학습() . lrnr.fine_tune(1) . epoch train_loss valid_loss error_rate time . 0 | 0.152362 | 0.015960 | 0.004060 | 00:08 | . epoch train_loss valid_loss error_rate time . 0 | 0.066467 | 0.028969 | 0.008119 | 00:10 | . fine_tune()은 모든 가중치를 학습하는 것이 아니라 일부만 학습하는 것임. | fine_tune()이외이 방법으로 학습할 수도 있음. | . (4) lrnr.예측() . (방법1) lrnr.predict() 함수를 이용 . lrnr.predict(&#39;2022-09-06-hani03.jpg&#39;) # 방법1-1 #lrnr.predict(PILImage.create(&#39;2022-09-06-hani03.jpg&#39;)) # 방법1-2 #lrnr.predict(path.ls()[0]) # 방법1-3 . (&#39;dog&#39;, TensorBase(1), TensorBase([0.2726, 0.7274])) . (방법2) lrnr.model(X) 를 이용: X의 shape이 (?,3,224,224)의 형태의 텐서이어야함 . X,y = dls.one_batch() # 방법2 lrnr.model(X[0:1]) . TensorBase([[-3.8654, 2.9234]], device=&#39;cuda:0&#39;, grad_fn=&lt;AliasBackward0&gt;) . &#54532;&#47196;&#44536;&#47000;&#48141; &#44284;&#51221; overview . - overview . (1) dls 오브젝트 생성 . (2) lrnr 오브젝트 생성 . (3) lrnr.학습() . (4) lrnr.예측() . - 비교 . 회귀분석(R) 이미지분석(CNN) 추천시스템 . 1단계 | data.frame() | ImageDataLoaders.from_name_func() | CollabDataLoaders.from_df() | . 2단계 | None | cnn_learner() | collab_learner() | . 3단계 | lm(y~x1+x2,df) | lrnr.fine_tune(1) | lrnr.fit() | . 4단계 | predict(ob,newdf) | lrnr.predict(), lrnr.model(X) | lrnr.model(X) | . &#49689;&#51228; . 아래의 함수들이 정의된 위치를 찾아보고 경로를 제출하라. . ImageDataLoaders.from_name_func | cnn_learner | lrnr.fine_tune | lrnr.predict | . 단, 여기에서 lrnr는 cnn_learner()로부터 생성된 오브젝트 이다. . 제출예시 . ImageDataLoaders.from_name_func . ~/anaconda3/envs/py37/lib/python3.7/site-packages/fastai/vision/data.py | .",
            "url": "https://guebin.github.io/DL2022/2022/09/08/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%948%EC%9D%BC.html",
            "relUrl": "/2022/09/08/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%948%EC%9D%BC.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "(1주차) 9월6일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . Import . from fastai.vision.all import * . &#45936;&#51060;&#53552;&#51200;&#51109; . path = untar_data(URLs.PETS)/&#39;images&#39; # URLs.PETS: 스트링 -&gt; 주소가 저장되어 있음.. -&gt; 주소로 들어가보니 어떠한 압축파일이 자동으로 다운 받아짐, 이게 데이터 # untar_data: (1) URLs.PETS에 저장된 주소로 찾아가서 (2) 압축을 풀어서 (3) 어떠한 폴더에 저장, 그 폴더의 위치는 path 에 저장 . . 100.00% [811712512/811706944 00:10&lt;00:00] path # 여기에 그림이 있다는 말이지?? . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images&#39;) . # 탐색... 여러파일들이 있기는함.. # Abyssinian_1.jpg 를 보고싶다면? PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;) . # Abyssinian_100.jpg 를 보고싶다면? PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_100.jpg&#39;) . - 그림을 확인 할 수 있는건 좋은데 이렇게 확인하니까 조금 귀찮음.. . _lst = [&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;,&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_10.jpg&#39;] . _lst[0] . &#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39; . PILImage.create(_lst[0]) . files= get_image_files(path) files . (#7390) [Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/scottish_terrier_92.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/leonberger_173.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/shiba_inu_120.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Persian_26.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/yorkshire_terrier_86.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Ragdoll_56.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/german_shorthaired_2.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/japanese_chin_169.jpg&#39;),Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_192.jpg&#39;)...] . files[0] . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/scottish_terrier_92.jpg&#39;) . PILImage.create(files[0]) . print(files[2]) PILImage.create(files[2]) . /root/.fastai/data/oxford-iiit-pet/images/shiba_inu_120.jpg . print(files[3]) PILImage.create(files[3]) . /root/.fastai/data/oxford-iiit-pet/images/Persian_26.jpg . print(files[4]) PILImage.create(files[4]) . /root/.fastai/data/oxford-iiit-pet/images/yorkshire_terrier_86.jpg . print(files[5]) PILImage.create(files[5]) . /root/.fastai/data/oxford-iiit-pet/images/Ragdoll_56.jpg . print(files[6]) PILImage.create(files[6]) . /root/.fastai/data/oxford-iiit-pet/images/german_shorthaired_2.jpg . print(files[7]) PILImage.create(files[7]) . /root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg . print(files[8]) PILImage.create(files[8]) . /root/.fastai/data/oxford-iiit-pet/images/japanese_chin_169.jpg . # 특1: 대문자이면 고양이, 소문자이면 강아지그림이다!! (천재적인 저장방식) # 특2: 이미지크기가 서로 다르다.. . def label_func(fname): if fname[0].isupper(): return &#39;cat&#39; else: return &#39;dog&#39; . dls = ImageDataLoaders.from_name_func(path,files,label_func,item_tfms=Resize(224)) # path 경로에서 # files 에 해당하는 파일들을 불러와서 X를 만들고 # item_tfms 에 정의된 방식으로 X를 변환하여 저장한다. 그리고 # label_func: &quot;파일이름&quot; -&gt; &quot;라벨&quot;, 에 저장된 함수내용을 바탕으로 y를 만들어 저장한다. # 이 모든것이 저장된 자료는 변수 dls에 저장한다. . dls.show_batch(max_n=16) . &#54617;&#49845; . # 우리의 1차 목표: 이미지 -&gt; 개/고양이 판단하는 모형을 채용하고, 그 모형에 데이터를 넣어서 학습하고, 그 모형의 결과를 판단하고 싶다. (즉 클래시파이어를 만든다는 소리) # 우리의 2차 목표: 그 모형에 &quot;새로운&quot; 자료를 전달하여 이미지를 분류할 것이다. (즉 클래시파이어를 쓴다는 소리) # cnn_learner 라는 함수를 이용해서 1차목표와 2차목표를 달성할 &quot;썸띵(Object)&quot;을 만들것임. ## 오브젝트란? 정보와 함수를 동시에 가지는 어떠한 집합체 # - 오브젝트.명사이름: 이것 통채로 하나의 변수처럼 쓸 수 있음. # - 오브젝트.동사이름: 이것 통채로 하나의 함수처럼 쓸 수 있음. (이때 함수의 첫번째 입력은 명시하지 않아도 오브젝트 그 자체가 된다) ## clafr에 필요한 명사(=정보) &lt;-- 우리가 넣어줘야하는 것들이 대부분 # (1) 모델정보: 클래시파이어로 누구를 뽑을것인가 (유명한 모델이 무엇인가? 잘 맞추는 모델이 무엇인가) # (2) 데이터: 데이터를 줘야함 # (3) 평가기준표: 채점을 할 지표 ## clafr에 필요한 동사(=함수) &lt;-- 이미 구현이 되어있음.. # (1) 학습 # (2) 결과를 판단 # (3) 예측 clsfr = cnn_learner(dls,resnet34,metrics=error_rate) # clsfr 라는 오브젝트를 만들건데.. # 그 오브젝트의 재료로 dls (데이터), resnet34 (데이터를 분석할 모형이름), metrics (모형의 성능을 평가할 기준) 를 넣음. . /usr/local/lib/python3.7/dist-packages/fastai/vision/learner.py:284: UserWarning: `cnn_learner` has been renamed to `vision_learner` -- please update your code warn(&#34;`cnn_learner` has been renamed to `vision_learner` -- please update your code&#34;) /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter &#39;pretrained&#39; is deprecated since 0.13 and will be removed in 0.15, please use &#39;weights&#39; instead. f&#34;The parameter &#39;{pretrained_param}&#39; is deprecated since 0.13 and will be removed in 0.15, &#34; /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for &#39;weights&#39; are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights. warnings.warn(msg) Downloading: &#34;https://download.pytorch.org/models/resnet34-b627a593.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet34-b627a593.pth . clsfr.fine_tune(1) # 학습을 하는 함수 . epoch train_loss valid_loss error_rate time . 0 | 0.189062 | 0.012517 | 0.006089 | 01:01 | . epoch train_loss valid_loss error_rate time . 0 | 0.051309 | 0.010439 | 0.003383 | 00:57 | . &#44592;&#51316; &#45936;&#51060;&#53552;&#47484; &#51096; &#47582;&#52628;&#45716;&#51648; &#54869;&#51064; . files[0] # 강아지 . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/scottish_terrier_92.jpg&#39;) . clsfr.predict(files[0]) . (&#39;dog&#39;, TensorBase(1), TensorBase([6.8846e-07, 1.0000e+00])) . files[7] # 고양이 . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;) . clsfr.predict(files[7]) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.3773e-08])) . clsfr.show_results() . &#50724;&#45813;&#48516;&#49437; . interpreter = Interpretation.from_learner(clsfr) # 오답을 분석하는 오브젝트를 만듬.. 재료는 클래시파이어! . interpreter.plot_top_losses(16) # 오답을 분석하는 오브젝트는 가장 오류가 높은 이미지를 정렬하여 보여주는 기능이 있음.. . &#51652;&#51676; &#51096;&#46104;&#45716;&#44172; &#47582;&#45716;&#44148;&#44032;? . clsfr.predict(files[7]) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.3773e-08])) . clsfr.predict(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.3773e-08])) . clsfr.predict(PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_34.jpg&#39;)) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.3773e-08])) . PILImage.create(&#39;2022-09-06-cat1.png&#39;) . clsfr.predict(PILImage.create(&#39;2022-09-06-cat1.png&#39;)) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 1.5662e-10])) . PILImage.create(&#39;2022-09-06-cat2.jpeg&#39;) . clsfr.predict(PILImage.create(&#39;2022-09-06-cat2.jpeg&#39;)) . (&#39;cat&#39;, TensorBase(0), TensorBase([0.9809, 0.0191])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani01.jpeg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([3.2573e-10, 1.0000e+00])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani02.jpeg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([7.0723e-07, 1.0000e+00])) . clsfr.predict(PILImage.create(&#39;2022-09-06-hani03.jpg&#39;)) . (&#39;dog&#39;, TensorBase(1), TensorBase([0.1814, 0.8186])) . &#49689;&#51228; . - 인터넷에 존재하는 개 혹은 고양이 이미지를 임의로 하나 불러온뒤 clsfr에 넣어보고 결과를 관찰하라. 관찰결과를 스크린샷하여 제출하라. . 숙제를 위한 예시코드 # https://dimg.donga.com/ugc/CDB/SHINDONGA/Article/5e/0d/9f/01/5e0d9f011a9ad2738de6.jpg &lt;-- 인터넷의 이미지 주소 img=PILImage.create(requests.get(&#39;https://dimg.donga.com/ugc/CDB/SHINDONGA/Article/5e/0d/9f/01/5e0d9f011a9ad2738de6.jpg&#39;).content) clsfr.predict(img) . | . - 숙제 못하겠으면 카톡으로 물어보세요! 답 알려드립니다. . - 숙제는 간단하게 편한 형식으로 제출하세요. (저는 스크린샷 선호해요..) pdf나 hwp로 만드실 필요 없습니다. .",
            "url": "https://guebin.github.io/DL2022/2022/09/06/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%946%EC%9D%BC.html",
            "relUrl": "/2022/09/06/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%946%EC%9D%BC.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "(1주차) 9월1일",
            "content": "&#44053;&#51032;&#50689;&#49345; . 없어요.. | . &#51656;&#47928;&#54616;&#45716; &#48169;&#48277; . &#49688;&#50629;&#47785;&#54364; . - 다양한 딥러닝 분석기법의 원리를 이해한다. . - 파이토치 사용방법을 익힌다. . &#44053;&#51032;&#44368;&#51116; &#48143; &#52280;&#44256;&#51088;&#47308; . - 강의교재: 강의노트 . - 참고자료: . 2021년 빅데이터분석 강의노트 (본 수업은 2021년 빅데이터분석 수업과 유사한 콘텐츠로 진행할 예정임) | 2022년 파이썬입문 강의노트 (numpy, class 부분이 약하다고 생각하면 참고 할 것) | fastai, Deep Learning for Coders with fastai &amp; PyTorch, Deep Learning for Coders with fastai &amp; PyTorch (번역판) | . &#49440;&#49688;&#44284;&#47785; . - 필수: 파이썬입문 (수업시간에 별도로 파이썬을 리뷰하는 시간을 갖지 않음) . - 선택: 수리통계학, 회귀분석, 선형대수학 (수업이해에 필요한 최소한의 지식은 리뷰함) . &#44053;&#51032;&#48276;&#50948; . - 딥러닝의 기초: DNN, 손실함수, 옵티마이저, 역전파, universal approximation thm . - 이미지 자료 분석: CNN, Class Activation Map (CAM) and XAI . - 추천시스템: SVD, Collaborative Filtering ... . - 텍스트와 시퀀스 자료 분석: RNN, LSTM, GRU, Attention... . - 생성모형: 식별모형과 생성모형, GAN . &#51452;&#51032;&#49324;&#54637; . - 출석을 모두 하고 과제를 모두 제출하였더라도 중간고사와 기말고사 합산점수가 매우 낮을 경우 F 혹은 D 학점이 나갈 수 있음. . - 2022년 1학기 데이터과학 수업과 내용이 일부 겹칠 수 있음 (다만 2022년 1학기 데이터과학 수업은 텐서플로우로 본 수업은 파이토치로 진행하는 차이점은 있음) .",
            "url": "https://guebin.github.io/DL2022/2022/09/01/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%941%EC%9D%BC.html",
            "relUrl": "/2022/09/01/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%941%EC%9D%BC.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "(A1) 깃허브와 fastpages를 이용하여 블로그 개설하기",
            "content": "About this doc . - 본 포스트는 2021년 1학기 Python 입문 강의내용중 일부를 업로드 하였음. . - Github, fastpages를 사용하여 블로그를 개설하고 관리하는 방법에 대한 설명임. . .",
            "url": "https://guebin.github.io/DL2022/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0.html",
            "relUrl": "/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0.html",
            "date": " • Aug 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "최규빈 . guebin@jbnu.ac.kr | 자연과학대학교 본관 205호 | 카카오톡 오픈채널1 | . 2022년 2학기 종료 후 폐쇄 예정 &#8617; . |",
          "url": "https://guebin.github.io/DL2022/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://guebin.github.io/DL2022/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}